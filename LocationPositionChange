param($Dept,$Office,$OUa,$OU,$email,$empID,$empLU,$deptO,$DID,$eA10,$ext,$jobTitleO,$OfficeO,$jobTitle,$3cx,$mngrLU,$City,$mngrAD,$mngrOU,$Phone,$State,$Street,$Zip,$StoreID,$userID,$Groups)
    $City = "%city%"
    $Dept = "%dept%"
        $Office=Switch($Dept){
                '*******'{'*******'}
                '*******'{'*******'}
                default{"%office%"}
                }
        $OUa=Switch($Dept){
                '*******'{'*******'}
                '*******'{'*******'}
                default{$Dept}
                }
            $OU=IF($Office -eq 'Admin'){
                    "$OUa*******"
                }else{
                    "$Office*******"
                }
    $email="%email%"
    $empID="%empID%"
        $empLU=Get-ADUser -Filter {employeeID -eq $empID} -Properties *
            $deptO=$empLU.department
            $DID=IF($Office -eq '*******'){
                    $empLU.extensionAttribute13
                }
            $eA10=$empLU.extensionAttribute10
            $ext=IF($Office -eq '*******'){
                    $empLU.ipPhone
                }
            $jobTitleO=$empLU.title
            $OfficeO=$empLU.physicalDeliveryOfficeName
            $userOU=$empLU.distinguishedName
    $jobTitle="%jobTitle%"
        $3cx=IF($Office -eq '*******' -AND $Office -ne $OfficeO){
                'Create extension via 3CX, update Confluence (*******) | IPphone = Extension | extensionAttribute13 = Full number (DID)'
            }elseIF($Office -eq '*******' -AND $Office -eq $OfficeO){
                "Update job title for associated extension (*******) | Ext: $ext | DID: $DID"
            }elseIF($Dept -like '*Manager' -OR $Dept -eq 'Bookkeeper' -OR $Dept -eq 'Receiving'){
                "Update $jobTitle extension in $Office, if one exists"
            }else{
                'N/A'
            }
        $mngrLU = Get-ADUser -Filter {employeeID -eq "%mngrID%"} -Properties *
            $mngrAD = $mngrLU.SamAccountName
            $mngrOU = $mngrLU.distinguishedName
            $fax = IF("%fax%"){"%fax%"}
            $Phone = IF("%phone%"){"%phone%"
                    }else{$mngrLU.extensionAttribute12}
        $State = "%state%"
        $StoreID = "%StoreID%"
        $Street = "%street%"
        $Zip = "%postalCode%"
        $userID = "%userID%"
        $Groups = Get-ADPrincipalGroupMembership $empLU | Where-Object { $_.Name -ne '*******' }
            IF($Dept -eq '*******' -OR $Dept -eq $deptO -AND $office -eq '*******'){
            }elseIF($Groups){
                Remove-ADPrincipalGroupMembership $empLU -MemberOf $Groups -Confirm:$false
            }

<#--------------------------------------------------------------------------
|Transfers and Position changes are updated the same, refresh Local AD info|
--------------------------------------------------------------------------#>
Set-ADUser $empLU -replace @{
    department=$Dept;
    extensionAttribute4=$jobTitle;
    extensionAttribute5=$Office;
    extensionAttribute6=$mngrAD;
    extensionAttribute12=$Phone;
    homePhone=$Phone;
    manager=$mngrOU;
    l=$City;
    physicalDeliveryOfficeName=$Office;
    st=$state;
    streetAddress=$Street;
    telephoneNumber=$Phone;
    title=$jobTitle
}
Set-ADUser $empLU -clear extensionAttribute7
IF($fax){
    Set-ADUser $empLU -replace @{
        facsimileTelephoneNumber=$fax
    }
}
$empLU | Move-ADObject -TargetPath $OU
$empLU = Get-ADUser -Filter {employeeID -eq $empID} -Properties *
$userOU = $empLU.distinguishedName                                                      #Grab users OU, for use with Manager Roles
<#---------------------------------------------------------------------------------------------------------
|Add AD Global Groups associated with job title, create notes for access that requires manual intervention|
---------------------------------------------------------------------------------------------------------#>
$MS='n/a'
Switch($office){                      #Home Office (Admin)
    'Admin'{
        $localGroups=@('*******')
        $MS='Compare Entra groups with a user with the same or similar title to ensure required access is added'
        Switch($Dept){
            '*******'{
                $localGroups+='*******','*******','*******'
                Switch($jobTitle){
                    '*******'{$localGroups+='*******','*******','*******'}
                    '*******'{$localGroups+='*******','*******','*******'}
                    default{$MS='Job Title not listed, compare with similar title and reach out to Manager (Entra and Local AD)'
                    }
                }
            }
            '*******'{
                $localGroups+='*******','*******'
                $MS='*******'
                Switch($jobTitle){
                    '*******'{$localGroups+='*******'}
                    '*******'{$localGroups+='*******','*******'}
                    default{$MS='Job Title not listed, compare with similar title and reach out to Manager (Entra and Local AD)'
                    }
                }
            }
            default{
                IF($Dept -like '*******'){
                    $localGroups+='*******','*******'
                    Switch($jobTitle){
                        '*******'{$localGroups+='Intranet Folder Access','Marketing'}
                        '*******'{}
                        '*******'{}
                        default{$MS='Job Title not listed, compare with similar title and reach out to Manager (Entra and Local AD)'
                        }
                    }
                }else{$MS='Job Title not listed, compare with similar title and reach out to Manager (Entra and Local AD)'
                }
            }
        }
    }
    default{
        $localGroups += @("*******")
        Switch($Dept){          #Retail & DC (Back Office/Frontline)
            '*******'{}
            '*******'{$MS=IF($Office -eq '*******'){'*******'}else{'*******'}}
            '*******'{
                Get-ADUser -Filter "title -ne '$jobTitle' -AND physicalDeliveryOfficeName -eq '$office'" -SearchBase "$OU*******" | 
                    forEach-Object {Set-ADUser $_.sAMAccountName -replace @{manager=$userOU;extensionAttribute6=$userID}}
                $localGroups='HR Benefits'
                $MS=IF($Office -eq '*******'){'*******'}else{'*******'}}
            '*******'{
                $localGroups='*******'
                Switch($jobTitle){
                    '*******'{$localGroups='*******'}
                }
            }
            default{$MS='Compare with similar title and reach out to Manager (Entra and Local AD)'
            }
        }
    }
}
IF($localGroups){
    Add-ADPrincipalGroupMembership $userID -MemberOf $localGroups
}
<#-------------------------------------------------------------------------
|Gather emails for BackOffice employees and Store/Home Office Dept Manager|
-------------------------------------------------------------------------#>
$deptMgrs = @(                                                      #Create array of standard job titles to gather emails for
    '*******',
    '*******',
    '*******',
    '*******',
    '*******'
)
$deptMgrs += Switch($dept){                                         #Add additional titles to array based on the employee's department
                'Clothing'{'*******'}
                'Hardside'{'*******'}
                'Machine Shop'{'*******'}
                'Shop'{'*******'}
                'Sporting Goods'{'*******','*******'}
            }
IF($Office -ne 'Admin'){                                            #IF not an Admin / Home Office employee, add the gathered emails
    $backOffice = (
        $deptMgrs | ForEach-Object{
            Get-ADUser -Filter "title -eq '$_'" -SearchBase $OU | Select-Object -ExpandProperty UserPrincipalName
        }
    ) -join ';'
    IF($jobTitle -contains 'Manager'){
        $backOffice += ';' + $mngrLU.UserPrincipalName
    }
}else{                                                              #IF is an Admin / Home Office employee, only add provided manager's email
    $backOffice = $mngrLU.UserPrincipalName
}
<#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|Create JSON array that will be parsed by Power Automate Desktop for use with generating Eagle account and passing data to an email for Help Desk and users in generated email list|
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#>
$JSON=[pscustomobject]@{
    eagleAR=$Egl
    eagleID=$eA10
    eMGR=$eMGR
    ext=$3cx
    jobTitleO=$jobTitleO
    latAR=$Lat
    msAR=$MS
    officeO=$OfficeO
}
$JSON | ConvertTo-Json -Compress | Write-Output
