param($EaglePW,$ChangeType,$Dept,$Office,$DC,$Lat,$OUa,$OU,$email,$empID,$empLU,$deptO,$DID,$eA10,$ext,$jobTitleO,$OfficeO,$userOU,$jobTitle,$3cx,$mngrID,$mngrLU,$City,$mngrAD,$mngrOU,$Phone,$State,$POS,$Street,$Zip,$StoreID,$userID,$Groups)
    $EaglePW=Get-Random -Minimum 1000 -Maximum 9999
    $ChangeType="%ChangeType%"
    $City="%city%"
    $Dept="%dept%"
        $Office=Switch($Dept){
                '*******'{'*******'}
                '*******'{'*******'}
                default{"%office%"}
                }
            $DC=IF($Office -eq '*******'){'*******'
                }elseIF($Office -eq '*******'){'*******'}
            $Lat=IF($Office -like "*******" -Or "%jobTitle%" -like "*******"){
                    "Create Latitude/PathGuide account, Password $EaglePW"
                }else{
                    'N/A'
                }
        $OUa=Switch($Dept){
                '*******'{'*******'}
                '*******'{'*******'}
                default{$Dept}
                }
            $OU=IF($Office -eq 'Admin'){
                    "$OUa*******"
                }else{
                    "$Office*******"
                }
    $email="%email%"
    $empID="%empID%"
        $empLU=Get-ADUser -Filter {employeeID -eq $empID} -Properties *
            $deptO=$empLU | Select-Object -ExpandProperty department
            $DID=IF($Office -eq '*******'){
                    $empLU | Select-Object -ExpandProperty extensionAttribute13
                }
            $eA10=$empLU | Select-Object -ExpandProperty extensionAttribute10
            $ext=IF($Office -eq '*******'){
                    $empLU | Select-Object -ExpandProperty ipPhone
                }
            $jobTitleO=$empLU | Select-Object -ExpandProperty title
            $OfficeO=$empLU | Select-Object -ExpandPropert physicalDeliveryOfficeName
            $userOU=$empLU | Select-Object -ExpandProperty distinguishedName
    $jobTitle="%jobTitle%"
        $3cx=IF($Office -eq '*******' -AND $Office -ne $OfficeO){
                'Create extension via 3CX, update Confluence (Admin Phone Extension) | IPphone = Extension | extensionAttribute13 = Full number (DID)'
            }elseIF($Office -eq '*******' -AND $Office -eq $OfficeO){
                "Update job title for associated extension in Confluence (Admin Phone Extension) | Ext: $ext | DID: $DID"
            }elseIF($Dept -like '*Manager' -OR $Dept -eq 'Bookkeeper' -OR $Dept -eq 'Receiving'){
                "Update $jobTitle extension in $Office, if one exists"
            }else{
                'N/A'
            }
    $mngrID="%mngrID%"
        $mngrLU=Get-ADUser -Filter {employeeID -eq $mngrID} -Properties *
            $mngrAD=$mngrLU | Select-Object -ExpandProperty SamAccountName
            $mngrOU=$mngrLU | Select-Object -ExpandProperty distinguishedName
            $Phone=$mngrLU | Select-Object -ExpandProperty extensionAttribute12
    $State="%state%"
        $POS=IF($State -eq 'MT'){
                'POSMT'
            }else{
                'POS'
            }
    $StoreID="%StoreID%"
    $Street="%street%"
    $Zip="%postalCode%"
    $userID="%userID%"
        $Groups=(Get-ADPrincipalGroupMembership -Identity $userID | Select-Object -ExpandProperty SAMAccountName) -ne '*******'
                IF($Dept -eq '*******' -OR $Dept -eq $deptO){
                }elseIF($Groups -ne ''){
                    Remove-ADPrincipalGroupMembership -Identity $userID -MemberOf $Groups -Confirm:$false
                }

#Update Profile
$empLU | Move-ADObject -TargetPath "$OU*******"
Set-ADUser $empLU -replace @{`
    department=$Dept;`
    extensionAttribute4=$jobTitle;`
    extensionAttribute5=$Office;`
    extensionAttribute6=$mngrAD;`
    extensionAttribute12=$Phone;`
    homePhone=$Phone;`
    manager=$mngrOU;`
    l=$City;`
    physicalDeliveryOfficeName=$Office;`
    st=$state;`
    streetAddress=$Street;`
    telephoneNumber=$Phone;`
    title=$jobTitle
}

#Title based access; AD Global Groups automated, create a txt file to import specified access into a ticket
Switch($jobTitle){
    #Back Office
    '*******'{Get-ADUser -Filter * -SearchBase "$office*******" -Properties * | ForEach-Object {Set-ADUser $_.sAMAccountName -replace @{manager=$userOU;extensionAttribute6=$userID}}
        $Egl="******* / $POS / *******"
        $MS='n/a'}
    '*******'{
        $Egl="$POS / *******"
        $MS=IF($Office -eq '*******'){'*******'}else{'*******'}}
#Frontline
    '*******'{
        $Egl="$POS"
        $MS='n/a'}
    '*******'{
        $Egl="$POS"
        $MS=IF($Office -eq '*******'){"$Office ******* / *******"}else{"$Office *******"}}
    '*******'{Add-ADPrincipalGroupMembership $userID -MemberOf '*******'
        $Egl="******* / $POS"
        $MS='n/a'}
#Home Office / Admin
    '*******'{Add-ADPrincipalGroupMembership $userID -MemberOf '*******','*******'
        $Egl='*******'
        $MS='*******'}
#Not Listed/New Title
    default{
        $Egl='Position not listed in script. Compare with similar title and/or reach out to Manager'
        $MS='Compare with similar title and/or reach out to Manager (Azure and Local AD)'}}

#Email list
    $Amgr=(Get-ADUser -Filter {title -eq 'Assistant Store Manager' -AND office -eq "%office%" -AND enabled -eq $true} | Select-Object -ExpandProperty UserPrincipalName) -join ';'
    $Bkpr=(Get-ADUser -Filter {title -eq 'Bookkeeper' -AND office -eq "%office%" -AND enabled -eq $true} | Select-Object -ExpandProperty UserPrincipalName) -join ';'
    $Cmgr=(Get-ADUser -Filter {title -eq 'Clothing Manager' -AND office -eq "%office%" -AND enabled -eq $true} | Select-Object -ExpandProperty UserPrincipalName) -join ';'
    $SGDm=(Get-ADUser -Filter {title -eq 'Sporting Goods Manager' -AND office -eq "%office%" -AND enabled -eq $true} | Select-Object -ExpandProperty UserPrincipalName) -join ';'
    $Smgr=Get-ADUser -Filter {employeeID -eq $mngrID} | Select-Object -ExpandProperty UserPrincipalName
    IF($Office -ne 'Admin'){
        $eMGR=Switch($Dept){
                'Clothing'{"$Amgr;$Bkpr;$Cmgr;$Smgr"}
                'Sporting Goods'{"$Amgr;$Bkpr;$SGDm;$Smgr"}
                default{"$Amgr;$Bkpr;$Smgr"}}
    }else{$eMGR=$Smgr}

#Create JSON
$JSON=[pscustomobject]@{
    eagleAR=$Egl
    eagleID=$eA10
    eMGR=$eMGR
    ext=$3cx
    jobTitleO=$jobTitleO
    latAR=$Lat
    msAR=$MS
    officeO=$OfficeO
}
$JSON | ConvertTo-Json -Compress | Write-Output
