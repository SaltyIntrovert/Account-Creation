param($City,$cReason,$Dept,$Office,$OUa,$OU,$DOB,$DOH,$empID,$empLU,$empVLD,$gn,$jobTitle,$3cx,$mngrID,$mngrAD,$Phone,$sn,$middle,$NAMEfull,$pName,$prefName,$displayName,$State,$storeID,$Street,$Zip)
    $City="%variable%"
    $cReason="%variable%"
    $Dept="%variable%"
        $Office=Switch($Dept){
            '*******'{'*******'}
            '*******'{'*******'}
            '*******'{'*******'}
            default{"%variable%"}
        }
        $OUa=Switch($Dept){
                '*******'{'*******'}
                '*******'{'*******'}
                '*******'{'*******'}
                default{$Dept}
            }
            $OU=IF($Office -eq '*******'){"$OUa*******"
                    }else{"$Office*******"
                }
    $DOB="%variable%"
    $DOH="%variable%"
    $empID="%variable%"
        $empLU=Get-ADUser -Filter {employeeID -eq $empID} -Properties *
            $empVLD=$empLU | Select-Object -ExpandProperty employeeID
    $gn="%variable%"
        $gn=$gn.substring(0,1).toupper()+$gn.substring(1).tolower()                                                     #Ensures first initial is uppercase
            $gnScrb=$gn -replace '[^\p{L}\p{Nd}/`//-/_/!]', ''
    $jobTitle="%variable%"
        $3cx=IF($Office -eq 'Admin'){
                    'Create extension via 3CX, update Confluence (Admin Phone Extension) | IP phone = Extension | extensionAttribute13 = Full number (DID)'
                }elseIF($Dept -like '*Manager' -OR $Dept -eq 'Bookkeeper' -OR $Dept -eq 'Receiving'){
                    "Update $jobTitle extension in $Office, if one exists"
                }else{'N/A'
            }
    $mngrID=IF("%variable%" -ne ''){"%variable%"
                }elseIF($office -ne 'Admin'){
                    Get-ADUser -Filter {title -eq 'Store Manager' -AND office -eq $Office -AND enabled -eq $true} -Properties * | Select-Object -ExpandProperty employeeID
            }
        $mngrLU=Get-ADUser -Filter {employeeID -eq $mngrID} -Properties *
            $mngrAD=$mngrLU | Select-Object -ExpandProperty SamAccountName
            $Phone=$mngrLU | Select-Object -ExpandProperty extensionAttribute12
    $sn="%variable%"                                                                                                    #ex. appleseed / apple-seed
        IF($sn -contains '-'){
            $sn1=[string]$sn.Split('-')[0].substring(0,1).toupper()+[string]$sn.Split('-')[0].substring(1).tolower()    #ex. Apple
            $sn2=[string]$sn.Split('-')[1].substring(0,1).toupper()+[string]$sn.Split('-')[1].substring(1).tolower()    #ex. Seed
            $sn="$sn1-$sn2"                                                                                             #ex. Apple-Seed
            $snScrb1=$sn1 -replace '[^\p{L}\p{Nd}/`//-/_/!]', ''                                                        #Removes special characters
            $snScrb2=$sn2 -replace '[^\p{L}\p{Nd}/`//-/_/!]', ''                                                        #^SAME^
            $snScrb="$snScrb1$snScrb2"                                                                                  #ex. AppleSeed
        }else{
            $sn=$sn.substring(0,1).toupper()+$sn.substring(1).tolower()                                                 #ex. Appleseed
            $snScrb=$sn -replace '[^\p{L}\p{Nd}/`//-/_/!]', ''                                                          #Removes special characters
        }
    $middle=IF("%variable%" -eq ''){$null                                                                               #Leave middle initial $null, if doesn't exist
            }else{"%variable%".toupper()[0]                                                                             #Grab only first initial and uppercase, if exists
            }
        $NAMEfull=IF($null -eq $middle){"$gn $sn"
                }else{"$gn $middle $sn"
                }
    $prefName="%variable%".substring(0,1).toupper()+"%variable%".substring(1).tolower()                                 #Ensures first initial is uppercase
        $displayName="$prefName $sn"
    $State="%variable%"
    $storeID="%variable%"
    $Street="%variable%"
    $Zip="%variable%"

<#--------------------------------------------------------------------------------
|D365 ID creation and validation, utilizing initials from First, Middle, and Last|
--------------------------------------------------------------------------------#>
IF($null -ne $middle){                                                  #Generate different initials if middle initials exist or not
    $eA10_a=($gnScrb[0]+$middle[0]+$snScrb[0]).toUpper()                #ex. JSA
    $eA10_c=($gnScrb[0]+$middle[0]+$snScrb[0]+$snScrb[1]).toUpper()     #ex. JSAP
}else{
    $eA10_a=($gnScrb[0]+$gnScrb[1]+$snScrb[0]).toUpper()                #ex. JOA
    $eA10_c=($gnScrb[0]+$snScrb[0]+$snScrb[1]+$snScrb[2]).toUpper()     #ex. JAPP
}
    $eA10_b=($gnScrb[0]+$snScrb[0]+$snScrb[1]).toUpper()                #ex. JAP
    $eA10_d=($gnScrb[0]+$gnScrb[1]+$snScrb[0]+$snScrb[1]).toUpper()     #ex. JOAP
    $eA10_e=($gnScrb[0]+$gnScrb[1]+$gnScrb[2]+$snScrb[0]).toUpper()     #ex. JOHP

$eA10users=@($eA10_e,$eA10_d,$eA10_c,$eA10_b,$eA10_a)                   #Create Array, containing possible initials. Ordered from least to most preferred

forEach($eID in $eA10users){                                            #Check AD if initials are already in use
    IF($null -ne $eID){
        $eA10LU1=Get-ADUser -Filter {extensionAttribute10 -eq $eID} -Properties * | Select-Object -ExpandProperty employeeID
        $eA10LU2=Get-ADUser -Filter {extensionAttribute10 -eq $eID} -Properties * | Select-Object -ExpandProperty enabled
        $eA10LU3=Get-ADUser -Filter {employeeID -eq $empID} -Properties * | Select-object -ExpandProperty extensionAttribute10
        IF($eA10LU2 -AND $eA10LU1 -ne $empID){
        }elseIF($eA10LU2 -eq $true -AND $eA10LU1 -eq $empID){           #IF initials exist and empID matches reuse, as it's the same account
            $eA10=Get-ADUser -Filter {extensionAttribute10 -eq $eID} -Properties * | Select-Object -ExpandProperty extensionAttribute10
        }elseIF($null -ne $eA10LU3){                                    #IF account is built and extensionAttribute10 contains a value
            $eA10=Get-ADUser -Filter {employeeID -eq $empID} -Properties * | Select-Object -ExpandProperty extensionAttribute10
        }else{
            $eA10=$eID                                                  #else, initials don't exist then continue to next loop
        }
    }
}

<#-------------------------------------------------------------------------------------
|Generate multiple possible userID's, in case provided userID is not valid or provided|
-------------------------------------------------------------------------------------#>
IF("%userID%" -eq ''){
    $userID=$pnScrb+'.'+$snScrb                                         #ex. John.AppleSeed (Create if not provided)
    $hrNum='1'
}else{
    $userID="%userID%"                                                  #ex. John.AppleSeed (Generally what HR provides)
}
$userID_b=$pnScrb+'.'+$middle+'.'+$snScrb                               #ex. John.S.AppleSeed
$userID_c=$pnScrb[0]+'.'+$snScrb                                        #ex. J.AppleSeed
$userID_d=$pnScrb[0]+$middle+'.'+$snScrb                                #ex. J.S.AppleSeed
$userID_e=IF($sn -like '*-*' -OR $sn -like '* *'){
                $pnScrb+'.'+$middle+'.'+($snScrb1[0]+$snScrb2[0])       #ex. John.S.AS
            }else{
                $pnScrb+'.'+$middle+'.'+$snScrb[0]                      #ex. John.S.A
            }

$userIDs=@($userID_e,$userID_d,$userID_c,$userID_b,$userID)             #Create Array, containing possible usernames. Ordered from least to most preferred

forEach($user in $userIDs){
    $user=$user -replace '\.\.', '.'                                                #Replace double dots ".." with a single dot "."
    $proxy="smtp:$user@*******"
        $adLU1=Get-ADUser -Filter {proxyAddresses -like $proxy} -Properties * | Select-Object -ExpandProperty employeeID
        $adLU2=Get-ADUser -Filter {proxyAddresses -like $proxy} -Properties * | Select-Object -ExpandProperty enabled
    IF($user.length -lt 20){
        $hrNum=IF($hrNum -eq '1'){'1'                                               #UserID was not provided
                }elseIF($hrNum -eq '2'){'2'                                         #exceeds 20 characters
                }elseIF($hrNum -eq '3'){'3'                                         #duplicate process
                }elseIF($hrNum -eq '4'){'4'                                         #userID already in use
                }else{'0'                                                           #No issues with provided UserID
                }
        IF($adLU2 -eq $true){
            IF($adLU1 -eq $empID){                                                  #Provided UserID is in use with an active account sharing an Emp ID (Same User)
                $userID=$empLU | Select-Object -ExpandProperty SAMAccountName       #Set variable, SAMAccountName - Duplicate Process
                $email=$empLU | Select-Object -ExpandProperty userPrincipalName     #Set variable, Email|mail|UPN - Duplicate Process
                $grID=$empLU | Select-Object -ExpandProperty userPrincipalName      #Set variable, Docebo username - Duplicate Process
                $hrNum='3'
            }elseIF($adLU1 -ne $empID -AND $hrNum -eq '0'){                         #Provided UserID in use by active account
                $hrNum='4'
                $hrFail=$adLU1
            }
        }else{
            $userID=$user                                                           #Set variable, SAMAccountName
            $email="$userID@*******"                                                #Set variable, Email|mail|UPN
            $grID="$userID@*******"                                                 #Set variable, Docebo username
        }
    }elseIF($user.length -gt 20 -AND $hrNum -eq '0'){
        $hrNum='2'                                                                  #Provided UserID exceeds 20 character
    }
}

<#------------------------------------------------------------------------------------
|IF account is disabled enable update SAMAccount if needed, else create a new account|
------------------------------------------------------------------------------------#>
$PWord="*******"                                                                                            #Generate Password based on generated initials and Store ID
IF($cReason -eq 'Rehire' -AND $null -ne $empVLD){
    $userIDtst=$empLU | Select-Object -ExpandProperty SAMAccountName                                        #Search for a pre-existing account and attach to variable, grab SAMAccountName
    IF($userID -ne $userIDtst){                                                                             #IF SAMAccountName is different than what HR provided update SAMAccountName
        Set-ADUser $empLU -remove @{ProxyAddresses="SMTP:$userIDtst@*******"}                               #Remove old proxy
        Set-ADUser $empLU -add @{ProxyAddresses="SMTP:$email,smtp:$userIDtst@*******" -split ","}           #Set new email as default and old as secondary proxy
        Set-ADUser $empLU -replace @{                                                                       #Update account to new email and SAMAccountName
            mail=$email;
            mailNickname=$userID;
            sAMAccountName=$userID;
            sn=$sn;
            targetAddress="SMTP:$userID@*******";
            userPrincipalName=$email
        }
        $empLU=Get-ADUser -Filter {employeeID -eq $empID} -Properties *                                     #Update variable, previously attached object changed
        $grID="$userIDtst@*******"                                                                          #Update variable, Docebo using old username/email
    }

    <#-----------------------------------------------
    |Clear all attributes related to legacy Exchange|
    -----------------------------------------------#>
    $badProxies=$empLU | Select-Object -ExpandProperty proxyAddresses |                                         #Gather all bad proxies associated with prior exchange system
            Where-Object{($_ -match '*******') -or
                        ($_ -match '*******') -or
                        ($_ -match '@*******') -or
                        ($_ -match '@*******')
            }
        IF($badProxies){
            forEach($proxy in $badProxies){                                                                     #Remove each bad proxy that was gathered from search
                Set-ADUser $empLU -remove @{ProxyAddresses=$proxy}
            }
        }
    Set-ADUser $empLU -clear MsExchMailboxGuid,MsExchRecipientDisplayType,MsExchRecipientTypeDetails            #Clear attributes associated with prior exchange system

    <##>
    Set-ADUser $empLU -description $null
    Set-ADUser $empLU -replace @{
        displayName=$displayName;
        givenName=$pnScrb
    }
    $DN=$empLU | Select-Object -ExpandProperty distinguishedName
        Rename-ADObject -Identity "$DN" -NewName "$NAMEfull"
    $empLU=Get-ADUser -Filter {employeeID -eq $empID} -Properties *                                         #Update variable, new account has been created
}elseIF($cReason -eq 'New Hire' -OR $cReason -eq 'Rehire' -AND $null -eq $empVLD){                          #IF account does not exist and not a rehie, then create a new account
    New-ADUser -Name $NAMEfull `
                -DisplayName $displayName `
                -GivenName $pnScrb `
                -Surname $sn `
                -samaccountname $userID `
                -UserPrincipalName $email `
                -EmailAddress $email `
                -EmployeeID $empID `
                -Company "*******" `
                -Country 'US'
    Start-Sleep -s 10
    $empLU=Get-ADUser -Filter {employeeID -eq $empID} -Properties *                                         #Update variable, new account has been created
        Set-ADUser $empLU -add @{ProxyAddresses="SMTP:$email"}                                              #Add proxy to new account
}

<#--------------------------------------------------
|Update account data after reactivation or creation|
--------------------------------------------------#> 
$empLU=Get-ADUser -Filter {employeeID -eq $empID} -Properties *
Set-ADAccountPassword $empLU -reset -newpassword (ConvertTo-SecureString -AsPlainText $PWord -Force)        #Set password for account (New or Reactivated)
Set-ADUser $empLU -ChangePasswordAtLogon $true -manager $mngrAD                                             #Set password to expire at login and set Manager
Set-ADUser $empLU -replace @{                                                                               #Update account details to current
    department=$Dept;
    extensionAttribute1=$DOB;
    extensionAttribute2=$DOH;
    extensionAttribute4=$jobTitle;
    extensionAttribute5=$Office;
    extensionAttribute6=$mngrAD;
    extensionAttribute10=$eA10;
    extensionAttribute12=$Phone;
    homePhone=$Phone;
    initials=$eA10;
    l=$city;
    physicalDeliveryOfficeName=$office;
    postalCode=$Zip;
    st=$State;
    streetAddress=$Street;
    telephoneNumber=$Phone;
    title=$jobTitle
}
IF($null -ne $middle){                                                                                      #Add employee's middle name if it exists
    Set-ADUser $empLU -replace @{
        middleName=$middle
    }
}
Enable-ADAccount $empLU                                                                                     #Mark account as enabled
$empLU | Move-ADObject -TargetPath "$OU*******"                                                             #Move to location associated OU
$userOU=$empLU | Select-Object -ExpandProperty distinguishedName                                            #Grab users OU, for use with Manager Roles

<#---------------------------------------------------------------------------------------------------------
|Add AD Global Groups associated with job title, create notes for access that requires manual intervention|
---------------------------------------------------------------------------------------------------------#>
Switch($jobTitle){
    #Back Office
    '*******'{Get-ADUser -Filter * -SearchBase "$office*******" -Properties * | ForEach-Object {Set-ADUser $_.sAMAccountName -replace @{manager=$userOU;extensionAttribute6=$userID}}
        $MS='n/a'}
    '*******'{
        $MS=IF($Office -eq '*******'){'*******'}else{'*******'}}
#Frontline
    '*******'{
        $MS='n/a'}
    '*******'{
        $MS=IF($Office -eq '*******'){"$Office ******* / *******"}else{"$Office *******"}}
    '*******'{Add-ADPrincipalGroupMembership $userID -MemberOf '*******'
        $MS='n/a'}
#Home Office / Admin
    '*******'{Add-ADPrincipalGroupMembership $userID -MemberOf '*******','*******'
        $MS='*******'}
#Not Listed/New Title
    default{
        $MS='Compare with similar title and/or reach out to Manager (Azure and Local AD)'}}

<#---------------------------------------------------------------------------------------------------------------------------
|Gather emails for Asst Manager(s), Bookkeeper, Clothing Manager, Sporting Goods Manager, and Store/Home Office Dept Manager|
---------------------------------------------------------------------------------------------------------------------------#>
$Amgr=(Get-ADUser -Filter {title -eq 'Assistant Store Manager' -AND office -eq "%variable%" -AND enabled -eq $true} | Select-Object -ExpandProperty UserPrincipalName) -join ';'
$Bkpr=(Get-ADUser -Filter {title -eq 'Bookkeeper' -AND office -eq "%variable%" -AND enabled -eq $true} | Select-Object -ExpandProperty UserPrincipalName) -join ';'
$Cmgr=(Get-ADUser -Filter {title -eq 'Clothing Manager' -AND office -eq "%variable%" -AND enabled -eq $true} | Select-Object -ExpandProperty UserPrincipalName) -join ';'
$SGDm=(Get-ADUser -Filter {title -eq 'Sporting Goods Manager' -AND office -eq "%variable%" -AND enabled -eq $true} | Select-Object -ExpandProperty UserPrincipalName) -join ';'
$Smgr=$mngrLU | Select-Object -ExpandProperty UserPrincipalName
IF($Office -ne 'Admin'){
    $eMGR=Switch($Dept){
            'Clothing'{"$Amgr;$Bkpr;$Cmgr;$Smgr"}           #If employee is in Clothing then include Clothing Manager
            'Sporting Goods'{"$Amgr;$Bkpr;$SGDm;$Smgr"}     #If employee is in Sporting Goods then include SGD Manager
            default{"$Amgr;$Bkpr;$Smgr"}}                   #If employee is not in Clothing or Sporting Goods, just send to Asst Manager(s), Bookkeeper, and Store Manager
}else{
    $eMGR=$Smgr                                             #If employee is not a Store Employee, just send to the provided Manager
}

<#---------------------------------------------------------------------------------------------------------------------------------------
|If the HR provided Username was too long or already in use, generate a note that will be emailed to HR providing generated userID/email|
---------------------------------------------------------------------------------------------------------------------------------------#>
$hrNotif=Switch($hrNUm){
    0{''}
    1{'Email not provided'}
    2{'Provided UserID exceeds 20 characters or in use'}
    3{'Duplicate'}
}

<#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|Create JSON array that will be parsed by Power Automate Desktop for use with generating Eagle account and passing data to an email for Help Desk and users in generated email list|
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#>
$JSON=[pscustomobject]@{
    email=$email
    eMGR=$eMGR
    ext=$3cx
    fullName=$NAMEfull
    grID=$grID
    hrNotif=$hrNotif
    hrNum=$hrNum
    init=$eA10
    mngrAD=$mngrAD
    msAR=$MS
    pWord=$PWord
    userID=$userID 
}
$JSON | ConvertTo-Json -Compress | Write-Output
