param($City,$cReason,$Dept,$Office,$OUa,$OU,$DOB,$DOH,$empID,$empLU,$empVLD,$gn,$jobTitle,$3cx,$mngrID,$mngrAD,$Phone,$sn,$middle,$NAMEfull,$pName,$prefName,$displayName,$State,$storeID,$Street,$Zip)
    $City="%variable%"
    $cReason="%variable%"
    $Dept="%variable%"
        $Office=Switch($Dept){
            '*******'{'*******'}
            '*******'{'*******'}
            '*******'{'*******'}
            default{"%variable%"}
        }
        $OUa=Switch($Dept){
                '*******'{'*******'}
                '*******'{'*******'}
                '*******'{'*******'}
                default{$Dept}
            }
            $OU=IF($Office -eq '*******'){"$OUa*******"
                    }else{"$Office*******"
                }
    $DOB="%variable%"
    $DOH="%variable%"
    $empID="%variable%"
        $empLU=Get-ADUser -Filter {employeeID -eq $empID} -Properties *                                        #Looks to see if account sharing Emp ID already exists
            $empVLD=$empLU | Select-Object -ExpandProperty employeeID                                          #IF exists, grabs the Emp ID
    $gn="%variable%"                                                                                           #ex. Johnny
        $gn=$gn.substring(0,1).toupper()+$gn.substring(1).tolower()                                            #Ensures first initial is uppercase
            $gnScrb=$gn -replace '[^\p{L}\p{Nd}/`//-/_/!]', ''                                                 #Removes special characters
    $jobTitle="%variable%"
        $3cx=IF($Office -eq 'Admin'){                                                                          #Create message for Extension update or creation. Email is sent in HTML (<br> = new line | <strong> = bold)
                    'Create extension via 3CX, update Confluence (Admin Phone Extension)<br><strong>Update Local AD attributes</strong><br>  <strong>-Extension =</strong> ipPhone & extensionAttribute14<br>  <strong>-Full number (DID) =</strong> extensionAttribute13'
                }elseIF($Dept -like '*Manager' -OR $Dept -eq 'Bookkeeper' -OR $Dept -eq 'Receiving'){          #Update extension title in 3CX
                    "Update $jobTitle extension in $Office, if one exists"
                }else{'N/A'
            }
    $mngrID=IF("%variable%" -ne ''){                                                                           #IF Manager Emp ID is Provided assign variable
                    "%variable%"
                }elseIF($office -ne 'Admin'){                                                                  #IF Manager Emp ID is not provided and employee is a Retail employee
                    Get-ADUser -Filter {title -eq 'Store Manager' -AND office -eq $Office -AND enabled -eq $true} -Properties * | Select-Object -ExpandProperty employeeID
            }
        $mngrLU=Get-ADUser -Filter {employeeID -eq $mngrID} -Properties *
            $mngrAD=$mngrLU | Select-Object -ExpandProperty SamAccountName
            $Phone=$mngrLU | Select-Object -ExpandProperty extensionAttribute12
    $sn="%variable%"                                                                                            #ex. appleseed / apple-seed / apple seed
            $sn1,$sn2=$sn -split '[- ]' | ForEach-Object{                                                       #Split IF surname contains Hyphen or Space
                $_.Substring(0,1).ToUpper()+$_.Substring(1).ToLower()                                           #Uppercase first character
            }
            $sn=Switch($sn){                                                                                    #Combine after setting first character to uppercase
                {$_ -like '* *'}{"$sn1 $sn2"}                                                                   #ex. Apple Seed
                {$_ -like '*-*'}{"$sn1-$sn2"}                                                                   #ex. Apple-Seed
                Default{$_}                                                                                     #ex. AppleSeed
            }
            $snScrb=$sn -replace '[^\p{L}\p{Nd}/`//-/_/!]', ''                                                  #Removes special characters
    $middle=IF("%NAMEmiddle%"){"%NAMEmiddle%".toUpper()[0]}                                                     #Grab only first initial and uppercase, if exists
        $NAMEfull=IF($null -eq $middle){"$gn $sn"                                                               #ex. Johnny AppleSeed
                }else{"$gn $middle $sn"                                                                         #ex. Johnny S AppleSeed
                }
    $pn="%prefName%"                                                                                            #ex. John
        $pn=$pn.substring(0,1).toUpper()+$pn.substring(1).toLower()                                             #Ensures first initial is uppercase
            $pnScrb=$pn -replace '[^\p{L}\p{Nd}/`//-/_/!]', ''                                                  #Removes special characters
                $displayName="$pn $sn"                                                                          #ex. John Apple-Seed
    $State="%variable%"
    $storeID="%variable%"
    $Street="%variable%"
    $Zip="%variable%"

<#--------------------------------------------------------------------------------
|D365 ID creation and validation, utilizing initials from First, Middle, and Last|
--------------------------------------------------------------------------------#>
$eA10users=@()                                                              #Set/Clear Array. Ordered from least to most preferred      
$eA10users+=($gnScrb[0]+$snScrb[0]+$snScrb[1]+$snScrb[2]).toUpper()         #ex. JAPP
$eA10users+=($gnScrb[0]+$gnScrb[1]+$gnScrb[2]+$snScrb[0]).toUpper()         #ex. JOHP
$eA10users+=($gnScrb[0]+$gnScrb[1]+$snScrb[0]+$snScrb[1]).toUpper()         #ex. JOAP
IF($middle){
    $eA10users+=($gnScrb[0]+$middle[0]+$snScrb[0]+$snScrb[1]).toUpper()     #ex. JSAP
    $eA10users+=($gnScrb[0]+$gnScrb[1]+$middle[0]+$snScrb[0]).toUpper()     #ex. JOSA
}
$eA10users+=($gnScrb[0]+$snScrb[0]+$snScrb[1]).toUpper()                    #ex. JAP
$eA10users+=($gnScrb[0]+$gnScrb[1]+$snScrb[0]).toUpper()                    #ex. JOA
IF($middle){$eA10users+=($gnScrb[0]+$middle[0]+$snScrb[0]).toUpper()}       #ex. JSA

forEach($eID in $eA10users){                                            #Check AD if initials are already in use
    IF($eID){
        $eA10LU1=Get-ADUser -Filter {extensionAttribute10 -eq $eID} -Properties * | Select-Object -ExpandProperty employeeID
        $eA10LU2=Get-ADUser -Filter {extensionAttribute10 -eq $eID} -Properties * | Select-Object -ExpandProperty enabled
        $eA10LU3=Get-ADUser -Filter {employeeID -eq $empID} -Properties * | Select-object -ExpandProperty extensionAttribute10
        IF($eA10LU2 -AND $eA10LU1 -ne $empID){
        }elseIF($eA10LU2 -AND $eA10LU1 -eq $empID){                    #IF initials exist and empID matches reuse, as it's the same account
            $eA10=Get-ADUser -Filter {extensionAttribute10 -eq $eID} -Properties * | Select-Object -ExpandProperty extensionAttribute10
        }elseIF($eA10LU3){                                             #IF account is built and extensionAttribute10 contains a value
            $eA10=Get-ADUser -Filter {employeeID -eq $empID} -Properties * | Select-Object -ExpandProperty extensionAttribute10
        }else{
            $eA10=$eID                                                  #else, initials don't exist then continue to next loop
        }
    }
}

<#-------------------------------------------------------------------------------------
|Generate multiple possible userID's, in case provided userID is not valid or provided|
-------------------------------------------------------------------------------------#>
IF("%userID%"){$userID_a="%userID%"                                         #ex. John.AppleSeed (Generally what HR provides)
}else{
    $userID_a=$pnScrb+'.'+$snScrb                                           #ex. John.AppleSeed (Create if not provided)
    $hrNum=1
}
$userID_b=$pnScrb+'.'+$middle+'.'+$snScrb                                   #ex. John.S.AppleSeed
$userID_c=$pnScrb[0]+'.'+$snScrb                                            #ex. J.AppleSeed
$userID_d=$pnScrb[0]+'.'+$middle+'.'+$snScrb                                #ex. J.S.AppleSeed
IF($sn -like '*-*' -OR $sn -like '* *'){
    $userID_e=$pnScrb+'.'+($snScrb1[0]+$snScrb2[0])                         #ex. John.AS
    $userID_f=$pnScrb+'.'+$middle+'.'+($snScrb1[0]+$snScrb2[0])             #ex. John.S.AS
}else{
    $userID_e=$pnScrb+'.'+$snScrb[0]                                        #ex. John.A
    $userID_f=$pnScrb+'.'+$middle+'.'+$snScrb[0]                            #ex. John.S.A
}

$userIDs=@($userID_e,$userID_d,$userID_c,$userID_b,$userID)             #Create Array, containing possible usernames. Ordered from least to most preferred

forEach($user in $userIDs){
    $user=$user -replace '\.\.', '.'                                                #Replace double dots ".." with a single dot "."
    $proxy="smtp:$user@*******"
        $adLU1=Get-ADUser -Filter {proxyAddresses -like $proxy} -Properties * | Select-Object -ExpandProperty employeeID
        $adLU2=Get-ADUser -Filter {proxyAddresses -like $proxy} -Properties * | Select-Object -ExpandProperty enabled
    IF($user.length -le 20){
        $hrNum=Switch($hrNum){
            1{1}                                                        #UserID was not provided
            2{2}                                                        #Exceeds 20 characters
            3{3}                                                        #Duplicate process
            4{4}                                                        #UserID already in use
            default{0}                                                  #No issues with provided UserID
        }
        IF($adLU2){
            IF($adLU1 -eq $empID -AND $user -eq $userID_a -AND $hrNum -eq 0){       #Provided UserID in use by active account, sharing Emp ID (Same User)
                $userID=$empLU | Select-Object -ExpandProperty SAMAccountName       #Set variable, SAMAccountName - Duplicate Process
                $email=$empLU | Select-Object -ExpandProperty userPrincipalName     #Set variable, Email|mail|UPN - Duplicate Process
                $grID=$empLU | Select-Object -ExpandProperty userPrincipalName      #Set variable, Docebo username - Duplicate Process
                $hrNum=3
            }elseIF($adLU1 -ne $user -eq $userID_a -AND $hrNum -eq 0){              #Provided UserID in use by active account, not sharing Emp ID (Different User)
                $hrNum=4
                $hrFail=$adLU1
            }
        }else{
            $userID=$user                                                           #Set variable, SAMAccountName
            $email="$userID@*******"                                                #Set variable, Email|mail|UPN
            $grID="$userID@*******"                                                 #Set variable, Docebo username
        }
    }elseIF($user.length -gt 20 -AND $user -eq $userID_a -AND $hrNum -eq 0){
        $hrNum=2                                                                    #Provided UserID exceeds 20 character
    }
}

<#------------------------------------------------------------------------------------
|IF account is disabled enable update SAMAccount if needed, else create a new account|
------------------------------------------------------------------------------------#>
$PWord="*******"                                                                                            #Generate Password based on generated initials and Store ID
IF($cReason -eq 'Rehire' -AND $empVLD){
    $userIDtst=$empLU | Select-Object -ExpandProperty SAMAccountName                                        #Search for a pre-existing account and attach to variable, grab SAMAccountName
    IF($userID -ne $userIDtst){                                                                             #IF SAMAccountName is different than what HR provided update SAMAccountName
        Set-ADUser $empLU -remove @{ProxyAddresses="SMTP:$userIDtst@*******"}                               #Remove old proxy
        Set-ADUser $empLU -add @{ProxyAddresses="SMTP:$email,smtp:$userIDtst@*******" -split ","}           #Set new email as default and old as secondary proxy
        Set-ADUser $empLU -replace @{                                                                       #Update account to new email and SAMAccountName
            mail=$email;
            mailNickname=$userID;
            sAMAccountName=$userID;
            sn=$sn;
            targetAddress="SMTP:$userID@*******";
            userPrincipalName=$email
        }
        $empLU=Get-ADUser -Filter {employeeID -eq $empID} -Properties *                                     #Update variable, previously attached object changed
        $grID="$userIDtst@*******"                                                                          #Update variable, Docebo using old username/email
    }

    <#-----------------------------------------------
    |Clear all attributes related to legacy Exchange|
    -----------------------------------------------#>
    $badProxies=$empLU | Select-Object -ExpandProperty proxyAddresses |                                         #Gather all bad proxies associated with prior exchange system
            Where-Object{($_ -match '*******') -or
                        ($_ -match '*******') -or
                        ($_ -match '@*******') -or
                        ($_ -match '@*******')
            }
        IF($badProxies){
            forEach($proxy in $badProxies){                                                                     #Remove each bad proxy that was gathered from search
                Set-ADUser $empLU -remove @{ProxyAddresses=$proxy}
            }
        }
    Set-ADUser $empLU -clear MsExchMailboxGuid,MsExchRecipientDisplayType,MsExchRecipientTypeDetails            #Clear attributes associated with prior exchange system

    <##>
    Set-ADUser $empLU -description $null
    Set-ADUser $empLU -replace @{
        displayName=$displayName;
        givenName=$pnScrb
    }
    $DN=$empLU | Select-Object -ExpandProperty distinguishedName
        Rename-ADObject -Identity "$DN" -NewName "$NAMEfull"
    $empLU=Get-ADUser -Filter {employeeID -eq $empID} -Properties *                                         #Update variable, new account has been created
}elseIF($cReason -eq 'New Hire' -OR $cReason -eq 'Rehire' -AND $null -eq $empVLD){                          #IF account does not exist and not a rehie, then create a new account
    New-ADUser -Name $NAMEfull `
                -DisplayName $displayName `
                -GivenName $pnScrb `
                -Surname $sn `
                -samaccountname $userID `
                -UserPrincipalName $email `
                -EmailAddress $email `
                -EmployeeID $empID `
                -Company "*******" `
                -Country 'US'
    Start-Sleep -s 10
    $empLU=Get-ADUser -Filter {employeeID -eq $empID} -Properties *                                         #Update variable, new account has been created
        Set-ADUser $empLU -add @{ProxyAddresses="SMTP:$email"}                                              #Add proxy to new account
}

<#--------------------------------------------------
|Update account data after reactivation or creation|
--------------------------------------------------#> 
$empLU=Get-ADUser -Filter {employeeID -eq $empID} -Properties *
Set-ADAccountPassword $empLU -reset -newpassword (ConvertTo-SecureString -AsPlainText $PWord -Force)        #Set password for account (New or Reactivated)
Set-ADUser $empLU -ChangePasswordAtLogon $true -manager $mngrAD                                             #Set password to expire at login and set Manager
Set-ADUser $empLU -replace @{                                                                               #Update account details to current
    department=$Dept;
    extensionAttribute1=$DOB;
    extensionAttribute2=$DOH;
    extensionAttribute4=$jobTitle;
    extensionAttribute5=$Office;
    extensionAttribute6=$mngrAD;
    extensionAttribute10=$eA10;
    extensionAttribute12=$Phone;
    homePhone=$Phone;
    initials=$eA10;
    l=$city;
    physicalDeliveryOfficeName=$office;
    postalCode=$Zip;
    st=$State;
    streetAddress=$Street;
    telephoneNumber=$Phone;
    title=$jobTitle
}
IF($null -ne $middle){                                                                                      #Add employee's middle name if it exists
    Set-ADUser $empLU -replace @{
        middleName=$middle
    }
}
Enable-ADAccount $empLU                                                                                     #Mark account as enabled
$empLU | Move-ADObject -TargetPath "$OU*******"                                                             #Move to location associated OU
$userOU=$empLU | Select-Object -ExpandProperty distinguishedName                                            #Grab users OU, for use with Manager Roles

<#---------------------------------------------------------------------------------------------------------
|Add AD Global Groups associated with job title, create notes for access that requires manual intervention|
---------------------------------------------------------------------------------------------------------#>
Switch($jobTitle){
    #Back Office / Retail-DC
    '*******'{Get-ADUser -Filter * -SearchBase "$office*******" -Properties * | ForEach-Object {Set-ADUser $_.sAMAccountName -replace @{manager=$userOU;extensionAttribute6=$userID}}
        $MS='n/a'}
    '*******'{
        $MS=IF($Office -eq '*******'){'*******'}else{'*******'}}
#Frontline
    '*******'{
        $MS='n/a'}
    '*******'{
        $MS=IF($Office -eq '*******'){"$Office ******* / *******"}else{"$Office *******"}}
    '*******'{Add-ADPrincipalGroupMembership $userID -MemberOf '*******'
        $MS='n/a'}
#Home Office / Admin
    '*******'{Add-ADPrincipalGroupMembership $userID -MemberOf '*******','*******'
        $MS='*******'}
#Not Listed/New Title
    default{
        $MS='Compare with similar title and/or reach out to Manager (Entra and Local AD)'}}

<#-------------------------------------------------------------------------
|Gather emails for BackOffice employees and Store/Home Office Dept Manager|
-------------------------------------------------------------------------#>
$backOffice=$mngrLU | Select-Object -ExpandProperty UserPrincipalName
$deptMgrs=@('*******','*******','*******','*******')
$deptMgrs+=Switch($dept){
                '*******'{'******* Manager'}
                '*******'{'******* Manager'}
                '*******'{'******* Lead'}
                '*******'{'Lead *******','******* Manager'}
            }
IF($Office -ne '*******'){
    $backOffice+=";"+(
        (
            $deptMgrs | ForEach-Object{
                Get-ADUser -Filter "title -eq '$_'" -SearchBase "$OU*******" | Select-Object -ExpandProperty UserPrincipalName
            }
        ) -join ';'
    )
}

<#---------------------------------------------------------------------------------------------------------------------------------------
|If the HR provided Username was too long or already in use, generate a note that will be emailed to HR providing generated userID/email|
---------------------------------------------------------------------------------------------------------------------------------------#>
$hrNotif=Switch($hrNUm){
    0{''}
    1{'Email not provided'}
    2{'Provided UserID exceeds 20 characters'}
    3{'Duplicate'}
    4{"Email in use by active account, $hrFail"}
}

<#--------------------------------------------------------------------------------------------------------------------------------------------
|Create JSON array that will be parsed by Power Automate Desktop for passing data to an email for Help Desk and users in generated email list|
--------------------------------------------------------------------------------------------------------------------------------------------#>
$JSON=[pscustomobject]@{
    email=$email
    eMGR=$eMGR
    ext=$3cx
    fullName=$NAMEfull
    grID=$grID
    hrNotif=$hrNotif
    hrNum=$hrNum
    init=$eA10
    mngrAD=$mngrAD
    msAR=$MS
    pWord=$PWord
    userID=$userID
}
$JSON | ConvertTo-Json -Compress | Write-Output
