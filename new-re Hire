param($City,$cReason,$Dept,$Office,$OUa,$OU,$DOB,$DOH,$empID,$empLU,$empVLD,$gn,$jobTitle,$3cx,$mngrID,$mngrAD,$Phone,$sn,$middle,$NAMEfull,$pn,$pnScrb,$displayName,$State,$storeID,$Street,$Zip)
    $City="%city%"
    $cReason="%changeReason%"
    $Dept="%dept%"
        $Office=Switch($Dept){
            '*******'{'*******'}
            '*******'{'*******'}
            '*******'{'*******'}
            default{"%variable%"}
        }
        $OUa=Switch($Dept){                                                                            #Converts HR provided Department to what's listed in Local AD
                '*******'{'*******'}
                '*******'{'*******'}
                '*******'{'*******'}
                default{$Dept}
            }
            $OU=IF($Office -eq '*******'){"$OUa*******"
                    }else{"$Office*******"
                }
    $DOB="%DOB%"
    $DOH="%DateOfHire%"
    $empID="%empID%"
        $empLU=Get-ADUser -Filter {employeeID -eq $empID} -Properties *                                 #Looks to see if account sharing Emp ID already exists
            $empVLD=$empLU | Select-Object -ExpandProperty employeeID                                   #IF exists, grabs the Emp ID
    $gn="%NAMEfirst%"                                                                                   #ex. Johnny
        $gn=$gn.substring(0,1).toUpper()+$gn.substring(1).toLower()                                     #Ensures first initial is uppercase
            $gnScrb=$gn -replace '[^\p{L}\p{Nd}/`//-/_/!]', ''                                          #Removes special characters
    $jobTitle="%jobTitle%"
        $3cx=IF($Office -eq '*******'){                                                                   #Create message for Extension update or creation. Email is sent in HTML (<br> = new line | <strong> = bold)
                'Create extension via 3CX, update Confluence <a href="*******">(Admin Phone Extension)</a><br><u><strong>Update Local AD attributes</strong></u><br>&emsp;<strong>-Extension =</strong> ******* & *******<br>&emsp;<strong>-Full number (DID) =</strong> *******'
            }elseIF($Dept -like '*******' -OR $Dept -eq '*******' -OR $Dept -eq '*******'){       #Update extension title in 3CX
                "Update $jobTitle extension for $Office, if one exists"
            }else{
                'N/A'
            }
    $mngrID=IF("%MngrID%"){"%MngrID%"                                                                   #IF Manager Emp ID is Provided assign variable
            }elseIF($office -ne 'Admin'){                                                               #IF Manager Emp ID is not provided and employee is a Retail employee
                Get-ADUser -Filter "title -eq 'Store Manager'" -AND -SearchBase "$OU*******" | Select-Object -ExpandProperty employeeID
            }
        $mngrLU=Get-ADUser -Filter {employeeID -eq $mngrID} -Properties *
            $mngrAD=$mngrLU | Select-Object -ExpandProperty SamAccountName
            $Phone=$mngrLU | Select-Object -ExpandProperty extensionAttribute12
    $sn="%NAMElast%"                                                                                    #ex. appleseed / apple-seed / apple seed
            $snScrb1,$snScrb2=$sn -split '[- ]' | forEach-Object{                                       #Split IF surname contains Hyphen or Space
                $_.Substring(0,1).ToUpper()+$_.Substring(1).ToLower()                                   #Uppercase first character
            }
            $sn=Switch($sn){                                                                            #Combine after setting first character to uppercase
                {$_ -like '* *'}{"$snScrb1 $snScrb2"}                                                   #ex. Apple Seed
                {$_ -like '*-*'}{"$snScrb1-$snScrb2"}                                                   #ex. Apple-Seed
                Default{$_}                                                                             #ex. AppleSeed
            }
            $snScrb=$sn -replace '[^\p{L}\p{Nd}/`//-/_/!]', ''                                          #Removes special characters
    $middle=IF("%NAMEmiddle%"){"%NAMEmiddle%".toUpper()[0]}                                             #Grab only first initial and uppercase, if exists
        $NAMEfull=IF($middle){"$gn $middle $sn"                                                         #ex. Johnny S AppleSeed
                }else{"$gn $sn"                                                                         #ex. Johnny AppleSeed
                }
    $pn="%prefName%"                                                                                    #ex. John
        $pn=$pn.substring(0,1).toUpper()+$pn.substring(1).toLower()                                     #Ensures first initial is uppercase
            $pnScrb=$pn -replace '[^\p{L}\p{Nd}/`//-/_/!]', ''                                          #Removes special characters
                $displayName="$pn $sn"                                                                  #ex. John Apple-Seed
    $State="%state%"
    $storeID="%storeID%"
    $Street="%streetAddress%"
    $Zip="%postalCode%"

<#---------------------------------------------------------------------------------
|Eagle ID creation and validation, utilizing initials from First, Middle, and Last|
---------------------------------------------------------------------------------#>
$eA10users=@()                                                              #Set/Clear Array. Ordered from least to most preferred      
$eA10users+=($gnScrb[0]+$snScrb[0]+$snScrb[1]+$snScrb[2]).toUpper()         #ex. JAPP
$eA10users+=($gnScrb[0]+$gnScrb[1]+$gnScrb[2]+$snScrb[0]).toUpper()         #ex. JOHP
$eA10users+=($gnScrb[0]+$gnScrb[1]+$snScrb[0]+$snScrb[1]).toUpper()         #ex. JOAP
IF($middle){
    $eA10users+=($gnScrb[0]+$middle[0]+$snScrb[0]+$snScrb[1]).toUpper()     #ex. JSAP
    $eA10users+=($gnScrb[0]+$gnScrb[1]+$middle[0]+$snScrb[0]).toUpper()     #ex. JOSA
}
$eA10users+=($gnScrb[0]+$snScrb[0]+$snScrb[1]).toUpper()                    #ex. JAP
$eA10users+=($gnScrb[0]+$gnScrb[1]+$snScrb[0]).toUpper()                    #ex. JOA
IF($middle){$eA10users+=($gnScrb[0]+$middle[0]+$snScrb[0]).toUpper()}       #ex. JSA

forEach($eID in $eA10users){                                                #Check Local AD if initials are already in use
    IF($eID){
            $eA10LU1=Get-ADUser -Filter {extensionAttribute10 -eq $eID} -Properties * | Select-Object -ExpandProperty employeeID
            $eA10LU2=Get-ADUser -Filter {extensionAttribute10 -eq $eID} -Properties * | Select-Object -ExpandProperty enabled
            $eA10LU3=Get-ADUser -Filter {employeeID -eq $empID} -Properties * | Select-object -ExpandProperty extensionAttribute10
        IF($eA10LU2-AND $eA10LU1 -ne $empID){
        }elseIF($eA10LU2 -AND $eA10LU1 -eq $empID){                         #IF initials exist and empID matches reuse, as it's the same account
            $eA10=Get-ADUser -Filter {extensionAttribute10 -eq $eID} -Properties * | Select-Object -ExpandProperty extensionAttribute10
        }elseIF($eA10LU3){                                                  #IF account is built and extensionAttribute10 contains a value
            $eA10=$eA10LU3
        }else{
            $eA10=$eID                                                      #else, initials don't exist then continue to next loop
        }
    }
}
<#----------------------------------------------------------------------------------------
|Generate multiple possible userID's, in case HR provided userID is not valid or provided|
----------------------------------------------------------------------------------------#>
IF("%userID%"){$userID_a="%userID%"                                         #ex. John.AppleSeed (Generally what HR provides)
}else{
    $userID_a=$pnScrb+'.'+$snScrb                                           #ex. John.AppleSeed (Create if not provided)
    $hrNum=1
}
$userID_b=$pnScrb+'.'+$middle+'.'+$snScrb                                   #ex. John.S.AppleSeed
$userID_c=$pnScrb[0]+'.'+$snScrb                                            #ex. J.AppleSeed
$userID_d=$pnScrb[0]+'.'+$middle+'.'+$snScrb                                #ex. J.S.AppleSeed
IF($sn -like '*-*' -OR $sn -like '* *'){
    $userID_e=$pnScrb+'.'+($snScrb1[0]+$snScrb2[0])                         #ex. John.AS
    $userID_f=$pnScrb+'.'+$middle+'.'+($snScrb1[0]+$snScrb2[0])             #ex. John.S.AS
}else{
    $userID_e=$pnScrb+'.'+$snScrb[0]                                        #ex. John.A
    $userID_f=$pnScrb+'.'+$middle+'.'+$snScrb[0]                            #ex. John.S.A
}

$userIDs=@($userID_f,$userID_e,$userID_d,$userID_c,$userID_b,$userID_a)     #Create Array, containing possible usernames. Ordered from least to most preferred

forEach($user in $userIDs){
    $user=$user -replace '\.\.', '.'                                        #Replace double dots ".." with a single dot "."
    $proxy="smtp:$user@*******"
        $adLU1=Get-ADUser -Filter {proxyAddresses -like $proxy} -Properties * | Select-Object -ExpandProperty employeeID
        $adLU2=Get-ADUser -Filter {proxyAddresses -like $proxy} -Properties * | Select-Object -ExpandProperty enabled
    IF($user.length -le 20){
        $hrNum=Switch($hrNum){                                          #Provided UserID/Email check
            1{1}                                                        #UserID/Email not provided
            2{2}                                                        #Exceeds 20 characters
            3{3}                                                        #Duplicate process
            4{4}                                                        #UserID/Email already in use
            default{0}                                                  #No issues
        }
        IF($adLU2){
            IF($adLU1 -eq $empID -AND $user -eq $userID_a -AND $hrNum -eq 0){           #Provided UserID in use by active account, sharing Emp ID (Same User)
                $userID=$empLU | Select-Object -ExpandProperty SAMAccountName           #Set variable, SAMAccountName - Duplicate Process
                $email=$empLU | Select-Object -ExpandProperty userPrincipalName         #Set variable, Email|mail|UPN - Duplicate Process
                $grID=$empLU | Select-Object -ExpandProperty userPrincipalName          #Set variable, Docebo username - Duplicate Process
                $hrNum=3
            }elseIF($adLU1 -ne $empID -AND $user -eq $userID_a -AND $hrNum -eq 0){      #Provided UserID in use by active account, not sharing Emp ID (Different User)
                $hrNum=4
                $hrFail=$adLU1                                                          #Grab employeeID of active user, added to conflict notice
            }
        }else{
            $userID=$user                                                               #Set variable, SAMAccountName
            $email="$userID@*******"                                                    #Set variable, Email|mail|UPN
            $grID="$userID@*******"                                                     #Set variable, Docebo username
        }
    }elseIF($user.length -gt 20 -AND $user -eq $userID_a -AND $hrNum -eq 0){
        $hrNum=2
    }
}
<#------------------------------------------------------------------------------------
|IF account is disabled enable update SAMAccount if needed, else create a new account|
------------------------------------------------------------------------------------#>
$PWord="*******"                                                                                #Generate Password based on generated initials and Store ID
IF($cReason -eq 'Rehire' -AND $empVLD){
    $userIDtst=$empLU | Select-Object -ExpandProperty SAMAccountName                                        #Search for a pre-existing account and attach to variable, grab SAMAccountName
    IF($userID -ne $userIDtst){                                                                             #IF SAMAccountName is different than what HR provided update SAMAccountName
        Set-ADUser $empLU -remove @{ProxyAddresses="SMTP:$userIDtst@*******"}                               #Remove old proxy
        Set-ADUser $empLU -add @{ProxyAddresses="SMTP:$email,smtp:$userIDtst@*******" -split ","}           #Set new email as default and old as secondary proxy
        Set-ADUser $empLU -replace @{                                                                       #Update account to new email and SAMAccountName
            mail=$email;
            mailNickname=$userID;
            sAMAccountName=$userID;
            sn=$sn;
            targetAddress="SMTP:$userID@*******";
            userPrincipalName=$email
        }
        $empLU=Get-ADUser -Filter {employeeID -eq $empID} -Properties *                                     #Update variable, previously attached object changed
        $grID="$userIDtst@*******"                                                                          #Update variable, Docebo using old username/email
    }
    <#-----------------------------------------------
    |Clear all attributes related to legacy Exchange|
    -----------------------------------------------#>
    $badProxies=$empLU | Select-Object -ExpandProperty proxyAddresses |                                     #Gather all bad proxies associated with prior exchange system
            Where-Object{($_ -match '*******') -or
                        ($_ -match '*******') -or
                        ($_ -match '@*******') -or
                        ($_ -match '@*******')
            }
    IF($badProxies){
        forEach($proxy in $badProxies){                                                                     #Remove each bad proxy that was gathered from search
            Set-ADUser $empLU -remove @{ProxyAddresses=$proxy}
        }
    }
    Set-ADUser $empLU -clear MsExchMailboxGuid,MsExchRecipientDisplayType,MsExchRecipientTypeDetails        #Clear attributes associated with prior exchange system

    Set-ADUser $empLU -description $null
    Set-ADUser $empLU -replace @{
        displayName=$displayName;
        givenName=$pnScrb
    }
    $DN=$empLU | Select-Object -ExpandProperty distinguishedName
        Rename-ADObject -Identity "$DN" -NewName "$NAMEfull"
    $empLU=Get-ADUser -Filter {employeeID -eq $empID} -Properties *                                         #Update variable, new account has been created
}elseIF($cReason -eq 'New Hire' -OR $cReason -eq 'Rehire' -AND $null -eq $empVLD){                          #IF account does not exist and not a rehie, then create a new account
    New-ADUser -Name $NAMEfull `
                -DisplayName $displayName `
                -GivenName $pnScrb `
                -Surname $sn `
                -samaccountname $userID `
                -UserPrincipalName $email `
                -EmailAddress $email `
                -EmployeeID $empID `
                -Company "*******" `
                -Country '*******'
    Start-Sleep -s 10                                                                                       #Delay added to allow for account creation, ranges from 0-7 seconds
    $empLU=Get-ADUser -Filter {employeeID -eq $empID} -Properties *                                         #Update variable, new account has been created
        Set-ADUser $empLU -add @{ProxyAddresses="SMTP:$email"}                                              #Add proxy to new account
}
<#--------------------------------------------------
|Update account data after reactivation or creation|
--------------------------------------------------#> 
$empLU=Get-ADUser -Filter {employeeID -eq $empID} -Properties *
Set-ADAccountPassword $empLU -reset -newpassword (ConvertTo-SecureString -AsPlainText $PWord -Force)        #Set password for account (New or Reactivated)
Set-ADUser $empLU -ChangePasswordAtLogon $true -manager $mngrAD                                             #Set password to expire at login and set Manager
Set-ADUser $empLU -replace @{                                                                               #Update account details to current
    department=$Dept;
    extensionAttribute1=$DOB;
    extensionAttribute2=$DOH;
    extensionAttribute4=$jobTitle;
    extensionAttribute5=$Office;
    extensionAttribute6=$mngrAD;
    extensionAttribute10=$eA10;
    extensionAttribute12=$Phone;
    homePhone=$Phone;
    initials=$eA10;
    l=$city;
    physicalDeliveryOfficeName=$office;
    postalCode=$Zip;
    st=$State;
    streetAddress=$Street;
    telephoneNumber=$Phone;
    title=$jobTitle
}
IF($middle){                                                                                                #Add employee's middle name if it exists
    Set-ADUser $empLU -replace @{
        middleName=$middle
    }
}
Enable-ADAccount $empLU                                                                                     #Mark account as enabled
$empLU | Move-ADObject -TargetPath "$OU*******"                                                             #Move to location associated OU
$userOU=$empLU | Select-Object -ExpandProperty distinguishedName                                            #Grab users OU, for use with Manager Roles

<#---------------------------------------------------------------------------------------------------------
|Add AD Global Groups associated with job title, create notes for access that requires manual intervention|
---------------------------------------------------------------------------------------------------------#>
$MS='n/a'
Switch($office){                      #Home Office (Admin)
    'Admin'{
        $localGroups=@('*******')
        $MS='Compare Entra groups with a user with the same or similar title to ensure required access is added'
        Switch($Dept){
            '*******'{
                $localGroups+='*******','*******','*******'
                Switch($jobTitle){
                    '*******'{$localGroups+='*******','*******','*******'}
                    '*******'{$localGroups+='*******','*******','*******'}
                    default{$MS='Job Title not listed, compare with similar title and reach out to Manager (Entra and Local AD)'
                    }
                }
            }
            '*******'{
                $localGroups+='*******','*******'
                $MS='*******'
                Switch($jobTitle){
                    '*******'{$localGroups+='*******'}
                    '*******'{$localGroups+='*******','*******'}
                    default{$MS='Job Title not listed, compare with similar title and reach out to Manager (Entra and Local AD)'
                    }
                }
            }
            default{
                IF($Dept -like '*******'){
                    $localGroups+='*******','*******'
                    Switch($jobTitle){
                        '*******'{$localGroups+='Intranet Folder Access','Marketing'}
                        '*******'{}
                        '*******'{}
                        default{$MS='Job Title not listed, compare with similar title and reach out to Manager (Entra and Local AD)'
                        }
                    }
                }else{$MS='Job Title not listed, compare with similar title and reach out to Manager (Entra and Local AD)'
                }
            }
        }
    }
    default{Switch($Dept){          #Retail & DC (Back Office/Frontline)
            '*******'{}
            '*******'{$MS=IF($Office -eq '*******'){'*******'}else{'*******'}}
            '*******'{
                Get-ADUser -Filter "title -ne '$jobTitle' -AND physicalDeliveryOfficeName -eq '$office'" -SearchBase "$OU*******" | 
                    forEach-Object {Set-ADUser $_.sAMAccountName -replace @{manager=$userOU;extensionAttribute6=$userID}}
                $localGroups='HR Benefits'
                $MS=IF($Office -eq '*******'){'*******'}else{'*******'}}
            '*******'{
                $localGroups='*******'
                Switch($jobTitle){
                    '*******'{$localGroups='*******'}
                }
            }
            default{$MS='Compare with similar title and reach out to Manager (Entra and Local AD)'
            }
        }
    }
}
<#-------------------------------------------------------------------------
|Gather emails for BackOffice employees and Store/Home Office Dept Manager|
-------------------------------------------------------------------------#>
$backOffice=$mngrLU | Select-Object -ExpandProperty UserPrincipalName
$deptMgrs=@('Assistant Store Manager','Distribution Center Asst Mgr','Retail Office Coordinator')
$deptMgrs+=Switch($dept){
                'Clothing'{'Assistant Store Manager - Clothing'}                                #IF employee is in Clothing then include Assistant Store Manager - Clothing
                'Hardside'{'Assistant Store Manager - Hardside'}                                #IF employee is in Hardside then include Assistant Store Manager - Hardside
                'Machine Shop'{'Service Manager'}                                               #IF employee is in Machine Shop then include Service Manager
                'Receiving'{'Assistant Store Manager - Operations'}                             #IF employee is in Receiving then include Assistant Store Manager - Operations
                'Retail Office Coordinator'{'Assistant Store Manager - Operations'}             #IF employee is in Retail Office Coordinator then include Assistant Store Manager - Operations
                'Shop'{'Shop Lead'}                                                             #IF employee is in Shop then include Shop Lead
                'Sporting Goods'{'Assistant Store Manager - Hardside','Sporting Goods Lead'}    #IF employee is in Sporting Goods then include Sporting Goods Lead and Assistant Store Manager - Hardside
            }
IF($Office -ne 'Admin'){                                                                        #IF employee is not Admin then include generated list above, if not just listed provided Manager
    $backOffice+=";"+(
        (
            $deptMgrs | ForEach-Object{
                Get-ADUser -Filter "title -eq '$_'" -SearchBase "$OU*******" | Select-Object -ExpandProperty UserPrincipalName
            }
        ) -join ';'
    )
}
<#---------------------------------------------------------------------------------------------------------------------------------------
|If the HR provided Username was too long or already in use, generate a note that will be emailed to HR providing generated userID/email|
---------------------------------------------------------------------------------------------------------------------------------------#>
$hrNotif=Switch($hrNUm){
    0{''}
    1{'Email not provided'}
    2{'Provided UserID exceeds 20 characters'}
    3{'Duplicate'}
    4{"Email in use by active account, $hrFail"}
}
<#--------------------------------------------------------------------------------------------------------------------------------------------
|Create JSON array that will be parsed by Power Automate Desktop for passing data to an email for Help Desk and users in generated email list|
--------------------------------------------------------------------------------------------------------------------------------------------#>
$JSON=[pscustomobject]@{
    email=$email
    eMGR=$backOffice
    ext=$3cx
    fullName=$NAMEfull
    grID=$grID
    hrNotif=$hrNotif
    hrNum=$hrNum
    init=$eA10
    mngrAD=$mngrAD
    msAR=$MS
    pWord=$PWord
    userID=$userID
}
$JSON | ConvertTo-Json -Compress | Write-Output
