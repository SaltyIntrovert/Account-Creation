param($EaglePW,$City,$cReason,$Dept,$Office,$DC,$Lat,$Lat2,$OUa,$OU,$DOB,$DOH,$email,$empID,$empLU,$empVLD,$gn,$jobTitle,$3cx,$mngrID,$mngrAD,$Phone,$sn,$middle,$NAMEfull,$pName,$prefName,$displayName,$State,$POS,$storeID,$Street,$userID,$Zip)
    $EaglePW=Get-Random -Minimum 1000 -Maximum 9999
    $City="%variable%"
    $cReason="%variable%"
    $Dept="%variable%"
        $Office=Switch($Dept){
            '*******'{'*******'}
            '*******'{'*******'}
            '*******'{'*******'}
            default{"%variable%"}
        }
            $DC=IF($Office -eq '*******'){'*******'
                }elseIF($Office -eq '*******'){'*******'
                }
            $Lat=IF($Office -like "*******" -Or "%variable%" -like "*******"){
                    "Create Latitude/PathGuide account, Password $EaglePW"
                }else{'N/A'}
            $Lat2=IF($Office -like "*******" -Or "%variable%" -like "*******"){
                    'Latitude will be same as Eagle/POS, please reach out if unable to login.'
                }else{''}
        $OUa=Switch($Dept){
                '*******'{'*******'}
                '*******'{'*******'}
                '*******'{'*******'}
                default{$Dept}
            }
            $OU=IF($Office -eq '*******'){
                    "$OUa*******"
                }else{
                    "$Office*******"
                }
    $DOB="%variable%"
    $DOH="%variable%"
    $email="%variable%"
    $empID="%variable%"
        $empLU=Get-ADUser -Filter {employeeID -eq $empID} -Properties *
            $empVLD=$empLU | Select-Object -ExpandProperty employeeID
    $gn="%variable%"
        $gn=$gn.substring(0,1).toupper()+$gn.substring(1).tolower()                                                     #Ensures first initial is uppercase
            $gnScrb=$gn -replace '[^\p{L}\p{Nd}/`//-/_/!]', ''
    $jobTitle="%variable%"
        $3cx=IF($Office -eq 'Admin'){'Create extension via 3CX, update Confluence (Admin Phone Extension) | IP phone = Extension | extensionAttribute13 = Full number (DID)'
            }elseIF($Dept -like '*Manager' -OR $Dept -eq 'Bookkeeper' -OR $Dept -eq 'Receiving'){"Update $jobTitle extension in $Office, if one exists"
            }else{'N/A'
            }
    $mngrID=IF("%variable%" -ne ''){"%variable%"
            }else{Get-ADUser -Filter {title -eq 'Store Manager' -AND office -eq $Office -AND enabled -eq $true} -Properties * | Select-Object -ExpandProperty employeeID
            }
        $mngrLU=Get-ADUser -Filter {employeeID -eq $mngrID} -Properties *
            $mngrAD=$mngrLU | Select-Object -ExpandProperty SamAccountName
            $Phone=$mngrLU | Select-Object -ExpandProperty extensionAttribute12
    $sn="%variable%"                                                                                                    #ex. appleseed / apple-seed
        IF($sn -contains '-'){
            $sn1=[string]$sn.Split('-')[0].substring(0,1).toupper()+[string]$sn.Split('-')[0].substring(1).tolower()    #ex. Apple
            $sn2=[string]$sn.Split('-')[1].substring(0,1).toupper()+[string]$sn.Split('-')[1].substring(1).tolower()    #ex. Seed
            $sn="$sn1-$sn2"                                                                                             #ex. Apple-Seed
            $snScrb1=$sn1 -replace '[^\p{L}\p{Nd}/`//-/_/!]', ''                                                        #Removes special characters
            $snScrb2=$sn2 -replace '[^\p{L}\p{Nd}/`//-/_/!]', ''                                                        #^SAME^
            $snScrb="$snScrb1$snScrb2"                                                                                  #ex. AppleSeed
        }else{
            $sn=$sn.substring(0,1).toupper()+$sn.substring(1).tolower()                                                 #ex. Appleseed
            $snScrb=$sn -replace '[^\p{L}\p{Nd}/`//-/_/!]', ''                                                          #Removes special characters
        }
    $middle=IF("%variable%" -eq ''){$null                                                                               #Leave middle initial $null, if doesn't exist
            }else{"%variable%".toupper()[0]                                                                             #Grab only first initial and uppercase, if exists
            }
        $NAMEfull=IF($null -eq $middle){"$gn $sn"
                }else{"$gn $middle $sn"
                }
    $prefName="%variable%".substring(0,1).toupper()+"%variable%".substring(1).tolower()                                 #Ensures first initial is uppercase
        $displayName="$prefName $sn"
    $State="%variable%"
        $POS=IF($State -eq 'MT'){'POSMT'}else{'POS'}
    $storeID="%variable%"
    $Street="%variable%"
    $userID=IF("%variable%" -eq ''){
                    $userID=$gnScrb+'.'+$snScrb
                    $email="$userID@murdochs.com"
                    $hrNum='1'
                }else{"%variable%"
            }
    $Zip="%variable%"

<#---------------------------------------------------------------------------------
|Eagle ID creation and validation, utilizing initials from First, Middle, and Last|
---------------------------------------------------------------------------------#>
IF($null -ne $middle){#Generate different initials if middle initials exist or not
    $eA10_a=($gnScrb[0]+$middle[0]+$snScrb[0]).toupper()                #ex. JSA
    $eA10_c=($gnScrb[0]+$middle[0]+$snScrb[0]+$snScrb[1]).toupper()     #ex. JSAP
}else{
    $eA10_a=($gnScrb[0]+$gnScrb[1]+$snScrb[0]).toupper()                #ex. JOA
    $eA10_c=($gnScrb[0]+$snScrb[0]+$snScrb[1]+$snScrb[2]).toupper()     #ex. JAPP
}
    $eA10_b=($gnScrb[0]+$snScrb[0]+$snScrb[1]).toupper()                #ex. JAP
    $eA10_d=($gnScrb[0]+$gnScrb[1]+$snScrb[0]+$snScrb[1]).toupper()     #ex. JOAP
    $eA10_e=($gnScrb[0]+$gnScrb[1]+$gnScrb[2]+$snScrb[0]).toupper()     #ex. JOHP

$eA10users=@($eA10_e,$eA10_d,$eA10_c,$eA10_b,$eA10_a)                   #Create an Object, containing possible initials. Ordered from least to most preferred option

forEach($eID in $eA10users){                                            #Check AD if initials are already in use
    IF($null -ne $eID){
        $eA10user=Get-ADUser -Filter {extensionAttribute10 -eq $eID}
        IF($eA10user){
            }else{$eA10=$eID
        }
    }
}

<#----------------------------------------------------------------------------
|Generate multiple possible userID's, in case HR provided userID is not valid|
----------------------------------------------------------------------------#>
$userID_b=$gnScrb+'.'+$middle+'.'+$snScrb                           #ex. Johnny.S.AppleSeed
$userID_c=$gnScrb[0]+'.'+$snScrb                                    #ex. J.AppleSeed
$userID_d=$gnScrb[0]+$middle+'.'+$snScrb                            #ex. J.S.AppleSeed
$userID_e=IF($sn -contains '-'){
                $gnScrb+'.'+$middle+'.'+$snScrb1[0]+$snScrb2[0]     #ex. Johnny.S.AS
            }else{
                $gnScrb+'.'+$middle+'.'+$snScrb[0]                  #ex. Johnny.S.A
        }

$userIDs=@($userID_e,$userID_d,$userID_c,$userID_b,$userID)

forEach($user in $userIDs){
    $proxy="smtp:$user*"
    $lookup=Get-ADUser -Filter {proxyAddresses -like $proxy} -Properties * | Select-Object -ExpandProperty Enabled
    IF($lookup -ne 'True' -AND $user.length -lt 20){
        IF($hrNum -eq '1'){$hrNum='1'                                           #HR did not provide an email
            }elseIF($userID.length -gt 20 -AND $hrNum -ne '1'){$hrNum='2'       #HR provided email that exceeded 20 characters or in use
            }else{$hrNum='0'                                                    #No issues with HR provided email
        }
        $userID=$user                                                           #Set variable, SAMAccountName
        $email="$userID*******"                                                 #Set variable, Email|mail|UPN
        $grID=$email                                                            #Set variable, Docebo username
    }
}

<#------------------------------------------------------------------------------------
|IF account is disabled enable update SAMAccount if needed, else create a new account|
------------------------------------------------------------------------------------#>
$PWord="*******"                                                                                        #Generate Password based on generated initials and Store ID
IF($cReason -eq 'Rehire' -AND $null -ne $empVLD){
    $userIDtst=$empLU | Select-Object -ExpandProperty SAMAccountName                                    #Search for a pre-existing account and attach to variable, grab SAMAccountName
    IF($userID -ne $userIDtst){                                                                         #IF SAMAccountName is different than what HR provided update SAMAccountName
        Set-ADUser $empLU -remove @{ProxyAddresses="SMTP:$userIDtst*******"}                            #Remove old proxy
        Set-ADUser $empLU -add @{ProxyAddresses="SMTP:$email,smtp:$userIDtst*******" -split ","}        #Set new email as default and old as secondary proxy
        Set-ADUser $empLU -replace @{                                                                   #Update account to new email and SAMAccountName
            mail=$email;
            mailNickname=$userID;
            sAMAccountName=$userID;
            sn=$NAMElast;
            targetAddress="SMTP:$userID*******";
            userPrincipalName=$email
        }
        $empLU=Get-ADUser -Filter {employeeID -eq $empID} -Properties *                                 #Update variable, previously attached object changed
        $grID="$userIDtst@murdochs.com"                                                                 #Update variable, Docebo using old username/email
    }else{$grID="$userID*******"}
    $badProxies=$empLU | Select-Object -ExpandProperty proxyAddresses |                                 #Gather all bad proxies associated with prior exchange system
                Where-Object{($_ -match '*******') -or
                            ($_ -match '*******') -or
                            ($_ -match '*******') -or
                            ($_ -match '*******')
                }
    IF($badProxies){
        forEach($proxy in $badProxies){                                                                 #Remove each bad proxy that was gathered from search
            Set-ADUser $empLU -remove @{ProxyAddresses=$proxy}
        }
    }
    Set-ADUser $empLU -clear MsExchMailboxGuid,MsExchRecipientDisplayType,MsExchRecipientTypeDetails    #Clear attributes associated with prior exchange system
    Enable-ADAccount $empLU
    Set-ADUser $empLU -description $null
    Set-ADUser $empLU -replace @{
        displayName=$displayName;
        givenName=$prefName
    }
    $DN=$empLU | Select-Object -ExpandProperty distinguishedName
        Rename-ADObject -Identity "$DN" -NewName "$NAMEfull"
}else{                                                                                                  #IF account does not exist and not a rehie, then create a new account
    New-ADUser -Name $NAMEfull -DisplayName $displayName -GivenName $prefName -Surname $NAMElast -samaccountname $userID -UserPrincipalName $email -EmailAddress $email -EmployeeID $empID -Company "*******" -Country 'US'
    Start-Sleep -s 15
    $empLU=Get-ADUser -Filter {employeeID -eq $empID} -Properties *                                     #Update variable, new account has been created
        Set-ADUser $empLU -add @{ProxyAddresses="SMTP:$email"}                                          #Add proxy to new account
    $grID="$userID*******"
}

<#--------------------------------------------------
|Update account data after reactivation or creation|
--------------------------------------------------#>
Set-ADAccountPassword $empLU -reset -newpassword (ConvertTo-SecureString -AsPlainText $PWord -Force)   #Set password for account (New or Reactivated)
Set-ADUser $empLU -ChangePasswordAtLogon $true -City $City -Department $Dept -manager $mngrAD -office $Office -PostalCode $Zip -state $State -streetAddress $Street -title $jobTitle
Set-ADUser $empLU -replace @{                                                                          #Update account details to current
    extensionAttribute1=$DOB;
    extensionAttribute2=$DOH;
    extensionAttribute4=$jobTitle;
    extensionAttribute5=$Office;
    extensionAttribute6=$mngrAD;
    extensionAttribute10=$eA10;
    extensionAttribute12=$Phone;
    homePhone=$Phone;
    telephoneNumber=$Phone;
    initials=$eA10
}
IF($null -ne $NAMEmiddle){                                                                              #Add employee's middle name if it exists
    Set-ADUser $empLU -replace @{middleName=$NAMEmiddle}
}
Enable-ADAccount $empLU                                                                                 #Mark account as enabled
$empLU | Move-ADObject -TargetPath "$OU*******"                                                         #Move to location associated OU
$userOU=$empLU | Select-Object -ExpandProperty distinguishedName                                        #Grab users OU, for use with Manager Roles

<#---------------------------------------------------------------------------------------------------------
|Add AD Global Groups associated with job title, create notes for access that requires manual intervention|
---------------------------------------------------------------------------------------------------------#>
Switch($jobTitle){
    #Back Office
    '*******'{Get-ADUser -Filter * -SearchBase "$office*******" -Properties * | ForEach-Object {Set-ADUser $_.sAMAccountName -replace @{manager=$userOU;extensionAttribute6=$userID}}
        $Egl="******* / $POS / *******"
        $MS='n/a'}
    '*******'{
        $Egl="$POS / *******"
        $MS=IF($Office -eq '*******'){'*******'}else{'*******'}}
#Frontline
    '*******'{
        $Egl="$POS"
        $MS='n/a'}
    '*******'{
        $Egl="$POS"
        $MS=IF($Office -eq '*******'){"$Office ******* / *******"}else{"$Office *******"}}
    '*******'{Add-ADPrincipalGroupMembership $userID -MemberOf '*******'
        $Egl="******* / $POS"
        $MS='n/a'}
#Home Office / Admin
    '*******'{Add-ADPrincipalGroupMembership $userID -MemberOf '*******','*******'
        $Egl='*******'
        $MS='*******'}
#Not Listed/New Title
    default{
        $Egl='Position not listed in script. Compare with similar title and/or reach out to Manager'
        $MS='Compare with similar title and/or reach out to Manager (Azure and Local AD)'}}

<#---------------------------------------------------------------------------------------------------------------------------
|Gather emails for Asst Manager(s), Bookkeeper, Clothing Manager, Sporting Goods Manager, and Store/Home Office Dept Manager|
---------------------------------------------------------------------------------------------------------------------------#>
$Amgr=(Get-ADUser -Filter {title -eq 'Assistant Store Manager' -AND office -eq "%variable%" -AND enabled -eq $true} | Select-Object -ExpandProperty UserPrincipalName) -join ';'
$Bkpr=(Get-ADUser -Filter {title -eq 'Bookkeeper' -AND office -eq "%variable%" -AND enabled -eq $true} | Select-Object -ExpandProperty UserPrincipalName) -join ';'
$Cmgr=(Get-ADUser -Filter {title -eq 'Clothing Manager' -AND office -eq "%variable%" -AND enabled -eq $true} | Select-Object -ExpandProperty UserPrincipalName) -join ';'
$SGDm=(Get-ADUser -Filter {title -eq 'Sporting Goods Manager' -AND office -eq "%variable%" -AND enabled -eq $true} | Select-Object -ExpandProperty UserPrincipalName) -join ';'
$Smgr=$mngrLU | Select-Object -ExpandProperty UserPrincipalName
IF($Office -ne 'Admin'){
    $eMGR=Switch($Dept){
            'Clothing'{"$Amgr;$Bkpr;$Cmgr;$Smgr"}           #If employee is in Clothing then include Clothing Manager
            'Sporting Goods'{"$Amgr;$Bkpr;$SGDm;$Smgr"}     #If employee is in Sporting Goods then include SGD Manager
            default{"$Amgr;$Bkpr;$Smgr"}}                   #If employee is not in Clothing or Sporting Goods, just send to Asst Manager(s), Bookkeeper, and Store Manager
}else{
    $eMGR=$Smgr                                             #If employee is not a Store Employee, just send to the provided Manager
}

<#---------------------------------------------------------------------------------------------------------------------------------------
|If the HR provided Username was too long or already in use, generate a note that will be emailed to HR providing generated userID/email|
---------------------------------------------------------------------------------------------------------------------------------------#>
$hrNotif=Switch($hrNUm){
    0{''}
    1{'Email not provided'}
    2{'Provided UserID exceeds 20 characters or in use'}
}

<#----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|Create JSON array that will be parsed by Power Automate Desktop for use with generating Eagle account and passing data to an email for Help Desk and users in generated email list|
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#>
$JSON=[pscustomobject]@{
    eagleAR=$Egl
    eagleID=$eA10
    eaglePW=$EaglePW
    email=$email
    eMGR=$eMGR
    ext=$3cx
    grID=$grID
    hrNotif=$hrNotif
    hrNum=$hrNum
    latAR=$Lat
    latNotif=$Lat2 
    mngrAD=$mngrAD
    msAR=$MS
    fullName=$NAMEfull
    pWord=$PWord
    userID=$userID 
}
$JSON | ConvertTo-Json -Compress | Write-Output
