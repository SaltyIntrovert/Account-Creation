param($EaglePW,$City,$cReason,$Dept,$Office,$DC,$Lat,$Lat2,$OUa,$OU,$DOB,$DOH,$email,$empID,$empVLD,$givenName,$NAMEfirst,$jobTitle,$3cx,$mngrID,$mngrAD,$mngrOU,$Phone,$sn,$NAMElast,$mName,$NAMEmiddle,$NAMEfull,$pName,$prefName,$displayName,$State,$POS,$storeID,$Street,$userIDa,$Zip)
    $EaglePW=Get-Random -Minimum 1000 -Maximum 9999
    $City="%city%"
    $cReason="%changeReason%"
    $Dept="%dept%"
        $Office=Switch($Dept){
                '*******'{'*******'}
                '*******'{'*******'}
                default{"%office%"}
                }
            $DC=IF($Office -eq '*******'){'*******'
                }elseIF($Office -eq '*******'){'*******'
            }
            $Lat=IF($Office -like "*thern DC" -Or "%jobTitle%" -like "IT Support*"){"******* $EaglePW"
                }else{'N/A'
            }
            $Lat2=IF($Office -like "*thern DC" -Or "%jobTitle%" -like "IT Support*"){'*******'
                }else{''
            }
        $OUa=Switch($Dept){
                '*******'{'*******'}
                '*******'{'*******'}
                default{$Dept}
            }
            $OU=IF($Office -eq '*******'){"$OUa*******"
                }else{"$Office*******"
            }
    $DOB="%DOB%"
    $DOH="%DateOfHire%"
    $email="%email%"
    $empID="%empID%"
        forEach($emp in $empID){
            $empVLD=Get-ADUser $emp -Properties * | Select-Object -ExpandProperty employeeID
            $userOU=Get-ADUser $emp -Properties * | Select-Object -ExpandProperty distinguishedName
        }
    $givenName="%NAMEfirst%"
        $NAMEfirst=$givenname.substring(0,1).toupper()+$givenname.substring(1).tolower()
    $jobTitle="%jobTitle%"
        $3cx=IF($Office -eq 'Admin'){
                'Create extension via 3CX, update Confluence (Admin Phone Extension) | IP phone = Extension | extensionAttribute13 = Full number (DID)'
            }elseIF($Dept -like '*Manager' -OR $Dept -eq 'Bookkeeper' -OR $Dept -eq 'Receiving'){
                "Update $jobTitle extension in $Office, if one exists"
            }else{
                'N/A'
            }
    $mngrID=IF("%MngrID%" -ne ''){
                "%MngrID%"
            }else{
                Get-ADUser -Filter {title -eq 'Store Manager' -AND office -eq $Office -AND enabled -eq $true} -Properties * | Select-Object -ExpandProperty employeeID
    }
        forEach($mngr in $mngrID){
            $mngrAD=Get-ADUser $mngr | Select-Object -ExpandProperty SamAccountName
            $mngrOU=Get-ADuser $mngr -Properties * | Select-Object -ExpandProperty distinguishedName
            $Phone=Get-ADUser $mngr -Properties * | Select-Object -ExpandProperty extensionAttribute12
        }
    $sn="%NAMElast%"
        $NAMElast=$sn.substring(0,1).toupper()+$sn.substring(1).tolower()
    $mName=IF("%NAMEmiddle%" -eq ''){$null
            }else{"%NAMEmiddle%".substring(0,1).toupper()+"%NAMEmiddle%".substring(1).tolower()
    }
        $NAMEmiddle=$mName[0]
        $NAMEfull=IF($null -eq $NAMEmiddle){"$NAMEfirst $NAMElast"
                }else{"$NAMEfirst $NAMEmiddle $NAMElast"
        }
    $prefName="%prefName%".substring(0,1).toupper()+"%prefName%".substring(1).tolower()
        $displayName="$prefName $NAMElast"
    $State="%state%"
        $POS=IF($State -eq 'MT'){'POSMT'
            }else{'POS'
        }
    $storeID="%storeID%"
    $Street="%streetAddress%"
    $userIDa=IF("%userID%" -like '*******'){[string]"%userID%".Split('@')[0..("%userID%".Split('@').count-2)]
            }else{"%userID%"
    }
    $Zip="%postalCode%"

#Eagle ID creation and validation, utilizing initials (If taken a variation containing letters from fullName)
$NAMEfirstScrb=$NAMEfirst -replace '[^\p{L}\p{Nd}/`//-/_/!]', ''
$NAMElastScrb=$NAMElast -replace '[^\p{L}\p{Nd}/`//-/_/!]', ''
IF($null -ne $NAMEmiddle){
    $eA10_a=$NAMEfirstScrb[0]+$NAMEmiddle[0]+$NAMElastScrb[0]
    $eA10_a=$eA10_a.toupper()
}else{
    $eA10_a=$NAMEfirstScrb[0]+$NAMEfirstScrb[1]+$NAMElastScrb[0]
    $eA10_a=$eA10_a.toupper()
}
    $eA10_b=$NAMEfirstScrb[0]+$NAMElastScrb[0]+$NAMElastScrb[1]
    $eA10_b=$eA10_b.toupper()  
IF($null -ne $NAMEmiddle){
    $eA10_c=$NAMEfirstScrb[0]+$NAMEmiddle[0]+$NAMElastScrb[0]+$NAMElastScrb[1]
    $eA10_c=$eA10_c.toupper()
}else{
    $eA10_c=$NAMEfirstScrb[0]+$NAMElastScrb[0]+$NAMElastScrb[1]+$NAMElastScrb[2]
    $eA10_c=$eA10_c.toupper()
}
    $eA10_d=$NAMEfirstScrb[0]+$NAMEfirstScrb[1]+$NAMElastScrb[0]+$NAMElastScrb[1]
    $eA10_d=$eA10_d.toupper()
    $eA10_e=$NAMEfirstScrb[0]+$NAMEfirstScrb[1]+$NAMEfirstScrb[2]+$NAMElastScrb[0]
    $eA10_e=$eA10_e.toupper()
IF($eA10_e -ne ''){
        $eA10user=Get-ADUser -Filter {extensionAttribute10 -eq $eA10_e}
    IF($eA10user){
    }else{
        $eA10=$eA10_e
    }
}
IF($eA10_d -ne ''){
    $eA10user=Get-ADUser -Filter {extensionAttribute10 -eq $eA10_d}
    IF($eA10user){
    }else{
        $eA10=$eA10_d
    }
}
IF($eA10_c -ne ''){
    $eA10user=Get-ADUser -Filter {extensionAttribute10 -eq $eA10_c}
    IF($eA10user){
    }else{
        $eA10=$eA10_c
    }
}
IF($eA10_b -ne ''){
    $eA10user=Get-ADUser -Filter {extensionAttribute10 -eq $eA10_b}
    IF($eA10user){
    }else{
        $eA10=$eA10_b
    }
}
IF($eA10_a -ne ''){
    $eA10user=Get-ADUser -Filter {extensionAttribute10 -eq $eA10_a}
    IF($eA10user){
    }else{
        $eA10=$eA10_a
    }
}

#UserID test and validation, IF userID is not provided one will be created
$NAMEf=$NAMEfirstScrb[0]
IF($email -eq '' -or $userID -eq ''){
    $userIDa="$NAMEfirstScrb.$NAMElastScrb"
    $hrNum='1'
}
        $testA=Get-ADUser -Filter {proxyAddresses -like "smtp:$userIDa*"} | Select-Object -ExpandProperty Enabled
    $userIDb="$NAMEfirstScrb.$NAMEmiddle.$NAMElastScrb"
        $testB=Get-ADUser -Filter {proxyAddresses -like "smtp:$userIDb*"} | Select-Object -ExpandProperty Enabled
    $userIDc="$NAMEf.$NAMElastScrb"
        $testC=Get-ADUser -Filter {proxyAddresses -like "smtp:$userIDc*"} | Select-Object -ExpandProperty Enabled
    $userIDd="$NAMEf$NAMEmiddle.$NAMElastScrb"
IF($testA -ne 'True' -AND $userIDa.length -gt 20){
    IF($testB -ne 'True' -AND $userIDb.length -gt 20){
        IF($testC -ne 'True' -AND $userIDc.length -gt 20){
            IF($userIDd.length -gt 20){
                $userID=$userIDd
                $email="$userIDd*******"
                $hrNum='2'
            }
        }else{
            $userID=$userIDc
            $email="$userIDc*******"
            $hrNum='2'
        }
    }else{
        $userID=$userIDb
        $email="$userIDb*******" 
        $hrNum='2'
    }
}else{
    $userID=$userIDa
    $email="$userIDa*******"
    IF($hrNum -eq '1'){$hrNum='1'}else{$hrNum='0'}
}

#IF account is disabled enable update SAMAccount if needed, else create a new account
$PWord='*******'
forEach($user in $userID){
    IF($cReason -eq 'Rehire' -AND $null -ne $empVLD){
        $userIDtst=Get-ADUser -Filter {employeeID -eq $empID} | Select-Object -ExpandProperty SAMAccountName
            IF($userID -ne $userIDtst){
                Set-ADUser $user -remove @{ProxyAddresses="SMTP:$userIDtst*******"}
                Set-ADUser $user -add @{ProxyAddresses="SMTP:$email,smtp:$userIDtst*******" -split ","}
                Set-ADUser $user -replace @{
                    mail=$email;
                    mailNickname=$userID;
                    sAMAccountName=$userID;
                    sn=$NAMElast;
                    targetAddress="SMTP:$userID*******";
                    userPrincipalName=$email
                }
                $grID="$userIDtst*******"
            }else{
                $grID="$userID*******"
            }
        $badProxies=Get-ADUser $user -Properties * | Select-Object -ExpandProperty proxyAddresses |
                    Where-Object{($_ -match '*******') -or
                                ($_ -match '*******') -or
                                ($_ -match '*******') -or
                                ($_ -match '*******')
                    }
            IF($badProxies){
                forEach($proxy in $badProxies){
                    Set-ADUser $userID -remove @{ProxyAddresses=$proxy}
                }
            }
        Set-ADUser $user -clear MsExchMailboxGuid,MsExchRecipientDisplayType,MsExchRecipientTypeDetails
        Set-ADUser $user -description $null
        Set-ADUser $user -replace @{
            displayName=$displayName;
            givenName=$prefName
        }
        $DN=Get-ADUser $user -Properties * | Select-Object -ExpandProperty distinguishedName
            Rename-ADObject -Identity "$DN" -NewName "$NAMEfull"
    }else{
        New-ADUser -Name $NAMEfull -DisplayName $displayName -GivenName $prefName -Surname $NAMElast -samaccountname $userID -UserPrincipalName $email -EmailAddress $email
        Set-ADUser $user -add @{ProxyAddresses="SMTP:$email"}
        $grID="$userID*******"
        $userOU=Get-ADUser $emp -Properties * | Select-Object -ExpandProperty distinguishedName
    }

    Start-Sleep -s 15

    Set-ADAccountPassword $user -reset -newpassword (ConvertTo-SecureString -AsPlainText $PWord -Force)
    Set-ADUser $user -ChangePasswordAtLogon $true
    Set-ADUser $user -replace @{
        c='US';
        company="*******";
        department=$Dept;
        employeeID=$empID;
        extensionAttribute1=$DOB;
        extensionAttribute2=$DOH;
        extensionAttribute4=$jobTitle;
        extensionAttribute5=$Office;
        extensionAttribute6=$mngrAD;
        extensionAttribute10=$eA10;
        extensionAttribute12=$Phone;
        homePhone=$Phone;
        l=$city;
        manager=$mngrOU;
        physicalDeliveryOfficeName=$Office;
        postalCode=$Zip;
        st=$State;
        streetAddress=$Street;
        telephoneNumber=$Phone;
        title=$jobTitle;
        initials=$eA10
    }
    IF($null -ne $NAMEmiddle){
        Set-ADUser $user -replace @{middleName=$NAMEmiddle}
    }
    Enable-ADAccount $User
    Get-ADUser $user | Move-ADObject -TargetPath "$OU*******"
}

#Title based access; AD Global Groups automated, create a txt file to import specified access into a ticket
Switch($jobTitle){
    #Back Office
    '*******'{Get-ADUser -Filter * -SearchBase "$office*******" -Properties * | ForEach-Object {Set-ADUser $_.sAMAccountName -replace @{manager=$userOU;extensionAttribute6=$userID}}
        $Egl="******* / $POS / *******"
        $MS='n/a'}
    '*******'{
        $Egl="$POS / *******"
        $MS=IF($Office -eq '*******'){'*******'}else{'*******'}}
#Frontline
    '*******'{
        $Egl="$POS"
        $MS='n/a'}
    '*******'{
        $Egl="$POS"
        $MS=IF($Office -eq '*******'){"$Office ******* / *******"}else{"$Office *******"}}
    '*******'{Add-ADPrincipalGroupMembership $userID -MemberOf '*******'
        $Egl="******* / $POS"
        $MS='n/a'}
#Home Office / Admin
    '*******'{Add-ADPrincipalGroupMembership $userID -MemberOf '*******','*******'
        $Egl='*******'
        $MS='*******'}
#Not Listed/New Title
    default{
        $Egl='Position not listed in script. Compare with similar title and/or reach out to Manager'
        $MS='Compare with similar title and/or reach out to Manager (Azure and Local AD)'}}

#Email list
$Amgr=(Get-ADUser -Filter {title -eq 'Assistant Store Manager' -AND office -eq "%office%" -AND enabled -eq $true} | Select-Object -ExpandProperty UserPrincipalName) -join ';'
$Bkpr=(Get-ADUser -Filter {title -eq 'Bookkeeper' -AND office -eq "%office%" -AND enabled -eq $true} | Select-Object -ExpandProperty UserPrincipalName) -join ';'
$Cmgr=(Get-ADUser -Filter {title -eq 'Clothing Manager' -AND office -eq "%office%" -AND enabled -eq $true} | Select-Object -ExpandProperty UserPrincipalName) -join ';'
$SGDm=(Get-ADUser -Filter {title -eq 'Sporting Goods Manager' -AND office -eq "%office%" -AND enabled -eq $true} | Select-Object -ExpandProperty UserPrincipalName) -join ';'
$Smgr=Get-ADUser -Filter {employeeID -eq $mngrID} | Select-Object -ExpandProperty UserPrincipalName

IF($Office -ne 'Admin'){
    $eMGR=Switch($Dept){
            'Clothing'{"$Amgr;$Bkpr;$Cmgr;$Smgr"}
            'Sporting Goods'{"$Amgr;$Bkpr;$SGDm;$Smgr"}
            default{"$Amgr;$Bkpr;$Smgr"}}
}else{
    $eMGR=$Smgr
}

#HR Notification
$hrNotif=Switch($hrNUm){
    0{''}
    1{'Email not provided'}
    2{'Provided UserID exceeds 20 characters or in use'}
}

#Create JSON
$JSON=[pscustomobject]@{
    eagleAR=$Egl
    eagleID=$eA10
    eaglePW=$EaglePW
    email=$email
    eMGR=$eMGR
    ext=$3cx
    grID=$grID
    hrNotif=$hrNotif
    hrNum=$hrNum
    latAR=$Lat
    latNotif=$Lat2 
    mngrAD=$mngrAD
    msAR=$MS
    fullName=$NAMEfull
    pWord=$PWord
    userID=$userID 
}
$JSON | ConvertTo-Json -Compress | Write-Output
